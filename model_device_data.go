/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceData{}

// DeviceData Serializer for device with data usage information.
type DeviceData struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Data []DataPoint `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _DeviceData DeviceData

// NewDeviceData instantiates a new DeviceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceData(id string, name string, data []DataPoint) *DeviceData {
	this := DeviceData{}
	this.Id = id
	this.Name = name
	this.Data = data
	return &this
}

// NewDeviceDataWithDefaults instantiates a new DeviceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDataWithDefaults() *DeviceData {
	this := DeviceData{}
	return &this
}

// GetId returns the Id field value
func (o *DeviceData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceData) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DeviceData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeviceData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeviceData) SetName(v string) {
	o.Name = v
}

// GetData returns the Data field value
func (o *DeviceData) GetData() []DataPoint {
	if o == nil {
		var ret []DataPoint
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DeviceData) GetDataOk() ([]DataPoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *DeviceData) SetData(v []DataPoint) {
	o.Data = v
}

func (o DeviceData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceData := _DeviceData{}

	err = json.Unmarshal(data, &varDeviceData)

	if err != nil {
		return err
	}

	*o = DeviceData(varDeviceData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceData struct {
	value *DeviceData
	isSet bool
}

func (v NullableDeviceData) Get() *DeviceData {
	return v.value
}

func (v *NullableDeviceData) Set(val *DeviceData) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceData) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceData(val *DeviceData) *NullableDeviceData {
	return &NullableDeviceData{value: val, isSet: true}
}

func (v NullableDeviceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


