/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Timeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Timeline{}

// Timeline Serializer for the billing timeline.
type Timeline struct {
	Events []TimelineEvent `json:"events"`
	ProratedAmount NullableFloat64 `json:"prorated_amount"`
	Currency NullableString `json:"currency"`
}

type _Timeline Timeline

// NewTimeline instantiates a new Timeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeline(events []TimelineEvent, proratedAmount NullableFloat64, currency NullableString) *Timeline {
	this := Timeline{}
	this.Events = events
	this.ProratedAmount = proratedAmount
	this.Currency = currency
	return &this
}

// NewTimelineWithDefaults instantiates a new Timeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineWithDefaults() *Timeline {
	this := Timeline{}
	return &this
}

// GetEvents returns the Events field value
func (o *Timeline) GetEvents() []TimelineEvent {
	if o == nil {
		var ret []TimelineEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *Timeline) GetEventsOk() ([]TimelineEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *Timeline) SetEvents(v []TimelineEvent) {
	o.Events = v
}

// GetProratedAmount returns the ProratedAmount field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *Timeline) GetProratedAmount() float64 {
	if o == nil || o.ProratedAmount.Get() == nil {
		var ret float64
		return ret
	}

	return *o.ProratedAmount.Get()
}

// GetProratedAmountOk returns a tuple with the ProratedAmount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Timeline) GetProratedAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProratedAmount.Get(), o.ProratedAmount.IsSet()
}

// SetProratedAmount sets field value
func (o *Timeline) SetProratedAmount(v float64) {
	o.ProratedAmount.Set(&v)
}

// GetCurrency returns the Currency field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Timeline) GetCurrency() string {
	if o == nil || o.Currency.Get() == nil {
		var ret string
		return ret
	}

	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Timeline) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// SetCurrency sets field value
func (o *Timeline) SetCurrency(v string) {
	o.Currency.Set(&v)
}

func (o Timeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Timeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	toSerialize["prorated_amount"] = o.ProratedAmount.Get()
	toSerialize["currency"] = o.Currency.Get()
	return toSerialize, nil
}

func (o *Timeline) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
		"prorated_amount",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeline := _Timeline{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeline)

	if err != nil {
		return err
	}

	*o = Timeline(varTimeline)

	return err
}

type NullableTimeline struct {
	value *Timeline
	isSet bool
}

func (v NullableTimeline) Get() *Timeline {
	return v.value
}

func (v *NullableTimeline) Set(val *Timeline) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeline) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeline(val *Timeline) *NullableTimeline {
	return &NullableTimeline{value: val, isSet: true}
}

func (v NullableTimeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


