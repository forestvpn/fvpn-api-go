/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BillingDeviceQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingDeviceQuota{}

// BillingDeviceQuota Serializer for device quota information.
type BillingDeviceQuota struct {
	CurrentUsage int64 `json:"current_usage"`
	Quota int64 `json:"quota"`
	UsagePercentage float64 `json:"usage_percentage"`
	IsWithinQuota bool `json:"is_within_quota"`
	IsUnlimited bool `json:"is_unlimited"`
	Message string `json:"message"`
}

type _BillingDeviceQuota BillingDeviceQuota

// NewBillingDeviceQuota instantiates a new BillingDeviceQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingDeviceQuota(currentUsage int64, quota int64, usagePercentage float64, isWithinQuota bool, isUnlimited bool, message string) *BillingDeviceQuota {
	this := BillingDeviceQuota{}
	this.CurrentUsage = currentUsage
	this.Quota = quota
	this.UsagePercentage = usagePercentage
	this.IsWithinQuota = isWithinQuota
	this.IsUnlimited = isUnlimited
	this.Message = message
	return &this
}

// NewBillingDeviceQuotaWithDefaults instantiates a new BillingDeviceQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingDeviceQuotaWithDefaults() *BillingDeviceQuota {
	this := BillingDeviceQuota{}
	return &this
}

// GetCurrentUsage returns the CurrentUsage field value
func (o *BillingDeviceQuota) GetCurrentUsage() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CurrentUsage
}

// GetCurrentUsageOk returns a tuple with the CurrentUsage field value
// and a boolean to check if the value has been set.
func (o *BillingDeviceQuota) GetCurrentUsageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentUsage, true
}

// SetCurrentUsage sets field value
func (o *BillingDeviceQuota) SetCurrentUsage(v int64) {
	o.CurrentUsage = v
}

// GetQuota returns the Quota field value
func (o *BillingDeviceQuota) GetQuota() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value
// and a boolean to check if the value has been set.
func (o *BillingDeviceQuota) GetQuotaOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quota, true
}

// SetQuota sets field value
func (o *BillingDeviceQuota) SetQuota(v int64) {
	o.Quota = v
}

// GetUsagePercentage returns the UsagePercentage field value
func (o *BillingDeviceQuota) GetUsagePercentage() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.UsagePercentage
}

// GetUsagePercentageOk returns a tuple with the UsagePercentage field value
// and a boolean to check if the value has been set.
func (o *BillingDeviceQuota) GetUsagePercentageOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsagePercentage, true
}

// SetUsagePercentage sets field value
func (o *BillingDeviceQuota) SetUsagePercentage(v float64) {
	o.UsagePercentage = v
}

// GetIsWithinQuota returns the IsWithinQuota field value
func (o *BillingDeviceQuota) GetIsWithinQuota() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsWithinQuota
}

// GetIsWithinQuotaOk returns a tuple with the IsWithinQuota field value
// and a boolean to check if the value has been set.
func (o *BillingDeviceQuota) GetIsWithinQuotaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsWithinQuota, true
}

// SetIsWithinQuota sets field value
func (o *BillingDeviceQuota) SetIsWithinQuota(v bool) {
	o.IsWithinQuota = v
}

// GetIsUnlimited returns the IsUnlimited field value
func (o *BillingDeviceQuota) GetIsUnlimited() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUnlimited
}

// GetIsUnlimitedOk returns a tuple with the IsUnlimited field value
// and a boolean to check if the value has been set.
func (o *BillingDeviceQuota) GetIsUnlimitedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUnlimited, true
}

// SetIsUnlimited sets field value
func (o *BillingDeviceQuota) SetIsUnlimited(v bool) {
	o.IsUnlimited = v
}

// GetMessage returns the Message field value
func (o *BillingDeviceQuota) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *BillingDeviceQuota) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *BillingDeviceQuota) SetMessage(v string) {
	o.Message = v
}

func (o BillingDeviceQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingDeviceQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["current_usage"] = o.CurrentUsage
	toSerialize["quota"] = o.Quota
	toSerialize["usage_percentage"] = o.UsagePercentage
	toSerialize["is_within_quota"] = o.IsWithinQuota
	toSerialize["is_unlimited"] = o.IsUnlimited
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *BillingDeviceQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"current_usage",
		"quota",
		"usage_percentage",
		"is_within_quota",
		"is_unlimited",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBillingDeviceQuota := _BillingDeviceQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBillingDeviceQuota)

	if err != nil {
		return err
	}

	*o = BillingDeviceQuota(varBillingDeviceQuota)

	return err
}

type NullableBillingDeviceQuota struct {
	value *BillingDeviceQuota
	isSet bool
}

func (v NullableBillingDeviceQuota) Get() *BillingDeviceQuota {
	return v.value
}

func (v *NullableBillingDeviceQuota) Set(val *BillingDeviceQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingDeviceQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingDeviceQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingDeviceQuota(val *BillingDeviceQuota) *NullableBillingDeviceQuota {
	return &NullableBillingDeviceQuota{value: val, isSet: true}
}

func (v NullableBillingDeviceQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingDeviceQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


