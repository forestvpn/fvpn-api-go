/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the AccountTokenRefresh type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountTokenRefresh{}

// AccountTokenRefresh Serializer for refreshing JWT tokens using a refresh token.  This serializer validates the provided refresh token and issues a new access token if the refresh token is valid.  Attributes:     refresh (str): The refresh token to be used for refreshing the access token.     access (str): The new access token issued upon successful token refresh.  Example:     Request:     {         \"refresh\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"     }      Response:     {         \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"     }
type AccountTokenRefresh struct {
	Refresh *string `json:"refresh,omitempty"`
	Access string `json:"access"`
	AdditionalProperties map[string]interface{}
}

type _AccountTokenRefresh AccountTokenRefresh

// NewAccountTokenRefresh instantiates a new AccountTokenRefresh object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountTokenRefresh(access string) *AccountTokenRefresh {
	this := AccountTokenRefresh{}
	this.Access = access
	return &this
}

// NewAccountTokenRefreshWithDefaults instantiates a new AccountTokenRefresh object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountTokenRefreshWithDefaults() *AccountTokenRefresh {
	this := AccountTokenRefresh{}
	return &this
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *AccountTokenRefresh) GetRefresh() string {
	if o == nil || IsNil(o.Refresh) {
		var ret string
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTokenRefresh) GetRefreshOk() (*string, bool) {
	if o == nil || IsNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *AccountTokenRefresh) HasRefresh() bool {
	if o != nil && !IsNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given string and assigns it to the Refresh field.
func (o *AccountTokenRefresh) SetRefresh(v string) {
	o.Refresh = &v
}

// GetAccess returns the Access field value
func (o *AccountTokenRefresh) GetAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *AccountTokenRefresh) GetAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *AccountTokenRefresh) SetAccess(v string) {
	o.Access = v
}

func (o AccountTokenRefresh) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountTokenRefresh) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	toSerialize["access"] = o.Access

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountTokenRefresh) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountTokenRefresh := _AccountTokenRefresh{}

	err = json.Unmarshal(data, &varAccountTokenRefresh)

	if err != nil {
		return err
	}

	*o = AccountTokenRefresh(varAccountTokenRefresh)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "refresh")
		delete(additionalProperties, "access")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountTokenRefresh struct {
	value *AccountTokenRefresh
	isSet bool
}

func (v NullableAccountTokenRefresh) Get() *AccountTokenRefresh {
	return v.value
}

func (v *NullableAccountTokenRefresh) Set(val *AccountTokenRefresh) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountTokenRefresh) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountTokenRefresh) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountTokenRefresh(val *AccountTokenRefresh) *NullableAccountTokenRefresh {
	return &NullableAccountTokenRefresh{value: val, isSet: true}
}

func (v NullableAccountTokenRefresh) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountTokenRefresh) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


