/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TopDevices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopDevices{}

// TopDevices Serializer for top devices data.
type TopDevices struct {
	Limit int64 `json:"limit"`
	Period Period `json:"period"`
	Devices []DeviceData `json:"devices"`
}

type _TopDevices TopDevices

// NewTopDevices instantiates a new TopDevices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopDevices(limit int64, period Period, devices []DeviceData) *TopDevices {
	this := TopDevices{}
	this.Limit = limit
	this.Period = period
	this.Devices = devices
	return &this
}

// NewTopDevicesWithDefaults instantiates a new TopDevices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopDevicesWithDefaults() *TopDevices {
	this := TopDevices{}
	return &this
}

// GetLimit returns the Limit field value
func (o *TopDevices) GetLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *TopDevices) GetLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *TopDevices) SetLimit(v int64) {
	o.Limit = v
}

// GetPeriod returns the Period field value
func (o *TopDevices) GetPeriod() Period {
	if o == nil {
		var ret Period
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *TopDevices) GetPeriodOk() (*Period, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *TopDevices) SetPeriod(v Period) {
	o.Period = v
}

// GetDevices returns the Devices field value
func (o *TopDevices) GetDevices() []DeviceData {
	if o == nil {
		var ret []DeviceData
		return ret
	}

	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value
// and a boolean to check if the value has been set.
func (o *TopDevices) GetDevicesOk() ([]DeviceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Devices, true
}

// SetDevices sets field value
func (o *TopDevices) SetDevices(v []DeviceData) {
	o.Devices = v
}

func (o TopDevices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopDevices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit
	toSerialize["period"] = o.Period
	toSerialize["devices"] = o.Devices
	return toSerialize, nil
}

func (o *TopDevices) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit",
		"period",
		"devices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTopDevices := _TopDevices{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTopDevices)

	if err != nil {
		return err
	}

	*o = TopDevices(varTopDevices)

	return err
}

type NullableTopDevices struct {
	value *TopDevices
	isSet bool
}

func (v NullableTopDevices) Get() *TopDevices {
	return v.value
}

func (v *NullableTopDevices) Set(val *TopDevices) {
	v.value = val
	v.isSet = true
}

func (v NullableTopDevices) IsSet() bool {
	return v.isSet
}

func (v *NullableTopDevices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopDevices(val *TopDevices) *NullableTopDevices {
	return &NullableTopDevices{value: val, isSet: true}
}

func (v NullableTopDevices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopDevices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


