/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the ComparisonData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComparisonData{}

// ComparisonData Serializer for period comparison analytics.
type ComparisonData struct {
	Current SummaryPeriod `json:"current"`
	Previous SummaryPeriod `json:"previous"`
	PercentChange float64 `json:"percent_change"`
	AdditionalProperties map[string]interface{}
}

type _ComparisonData ComparisonData

// NewComparisonData instantiates a new ComparisonData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComparisonData(current SummaryPeriod, previous SummaryPeriod, percentChange float64) *ComparisonData {
	this := ComparisonData{}
	this.Current = current
	this.Previous = previous
	this.PercentChange = percentChange
	return &this
}

// NewComparisonDataWithDefaults instantiates a new ComparisonData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComparisonDataWithDefaults() *ComparisonData {
	this := ComparisonData{}
	return &this
}

// GetCurrent returns the Current field value
func (o *ComparisonData) GetCurrent() SummaryPeriod {
	if o == nil {
		var ret SummaryPeriod
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *ComparisonData) GetCurrentOk() (*SummaryPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *ComparisonData) SetCurrent(v SummaryPeriod) {
	o.Current = v
}

// GetPrevious returns the Previous field value
func (o *ComparisonData) GetPrevious() SummaryPeriod {
	if o == nil {
		var ret SummaryPeriod
		return ret
	}

	return o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value
// and a boolean to check if the value has been set.
func (o *ComparisonData) GetPreviousOk() (*SummaryPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Previous, true
}

// SetPrevious sets field value
func (o *ComparisonData) SetPrevious(v SummaryPeriod) {
	o.Previous = v
}

// GetPercentChange returns the PercentChange field value
func (o *ComparisonData) GetPercentChange() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PercentChange
}

// GetPercentChangeOk returns a tuple with the PercentChange field value
// and a boolean to check if the value has been set.
func (o *ComparisonData) GetPercentChangeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentChange, true
}

// SetPercentChange sets field value
func (o *ComparisonData) SetPercentChange(v float64) {
	o.PercentChange = v
}

func (o ComparisonData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComparisonData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["current"] = o.Current
	toSerialize["previous"] = o.Previous
	toSerialize["percent_change"] = o.PercentChange

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComparisonData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"current",
		"previous",
		"percent_change",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComparisonData := _ComparisonData{}

	err = json.Unmarshal(data, &varComparisonData)

	if err != nil {
		return err
	}

	*o = ComparisonData(varComparisonData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "current")
		delete(additionalProperties, "previous")
		delete(additionalProperties, "percent_change")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComparisonData struct {
	value *ComparisonData
	isSet bool
}

func (v NullableComparisonData) Get() *ComparisonData {
	return v.value
}

func (v *NullableComparisonData) Set(val *ComparisonData) {
	v.value = val
	v.isSet = true
}

func (v NullableComparisonData) IsSet() bool {
	return v.isSet
}

func (v *NullableComparisonData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComparisonData(val *ComparisonData) *NullableComparisonData {
	return &NullableComparisonData{value: val, isSet: true}
}

func (v NullableComparisonData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComparisonData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


