/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceDataUsageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceDataUsageRequest{}

// DeviceDataUsageRequest struct for DeviceDataUsageRequest
type DeviceDataUsageRequest struct {
	Rx int64 `json:"rx"`
	Tx int64 `json:"tx"`
	Total int64 `json:"total"`
}

type _DeviceDataUsageRequest DeviceDataUsageRequest

// NewDeviceDataUsageRequest instantiates a new DeviceDataUsageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDataUsageRequest(rx int64, tx int64, total int64) *DeviceDataUsageRequest {
	this := DeviceDataUsageRequest{}
	this.Rx = rx
	this.Tx = tx
	this.Total = total
	return &this
}

// NewDeviceDataUsageRequestWithDefaults instantiates a new DeviceDataUsageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDataUsageRequestWithDefaults() *DeviceDataUsageRequest {
	this := DeviceDataUsageRequest{}
	return &this
}

// GetRx returns the Rx field value
func (o *DeviceDataUsageRequest) GetRx() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Rx
}

// GetRxOk returns a tuple with the Rx field value
// and a boolean to check if the value has been set.
func (o *DeviceDataUsageRequest) GetRxOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rx, true
}

// SetRx sets field value
func (o *DeviceDataUsageRequest) SetRx(v int64) {
	o.Rx = v
}

// GetTx returns the Tx field value
func (o *DeviceDataUsageRequest) GetTx() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Tx
}

// GetTxOk returns a tuple with the Tx field value
// and a boolean to check if the value has been set.
func (o *DeviceDataUsageRequest) GetTxOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tx, true
}

// SetTx sets field value
func (o *DeviceDataUsageRequest) SetTx(v int64) {
	o.Tx = v
}

// GetTotal returns the Total field value
func (o *DeviceDataUsageRequest) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *DeviceDataUsageRequest) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *DeviceDataUsageRequest) SetTotal(v int64) {
	o.Total = v
}

func (o DeviceDataUsageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceDataUsageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rx"] = o.Rx
	toSerialize["tx"] = o.Tx
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *DeviceDataUsageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rx",
		"tx",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceDataUsageRequest := _DeviceDataUsageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceDataUsageRequest)

	if err != nil {
		return err
	}

	*o = DeviceDataUsageRequest(varDeviceDataUsageRequest)

	return err
}

type NullableDeviceDataUsageRequest struct {
	value *DeviceDataUsageRequest
	isSet bool
}

func (v NullableDeviceDataUsageRequest) Get() *DeviceDataUsageRequest {
	return v.value
}

func (v *NullableDeviceDataUsageRequest) Set(val *DeviceDataUsageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDataUsageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDataUsageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDataUsageRequest(val *DeviceDataUsageRequest) *NullableDeviceDataUsageRequest {
	return &NullableDeviceDataUsageRequest{value: val, isSet: true}
}

func (v NullableDeviceDataUsageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDataUsageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


