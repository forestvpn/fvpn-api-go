/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the PlanPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanPrice{}

// PlanPrice struct for PlanPrice
type PlanPrice struct {
	Id string `json:"id"`
	Interval *Interval `json:"interval,omitempty"`
	Amount float64 `json:"amount"`
	Currency string `json:"currency"`
	// Number of trial days, must be a positive integer greater than 0
	TrialDays NullableInt64 `json:"trial_days,omitempty"`
	PriceDiffInfo NullablePriceDiffInfo `json:"price_diff_info"`
	IsMostPopular *bool `json:"is_most_popular,omitempty"`
	IsEligibleForTrial bool `json:"is_eligible_for_trial"`
	AdditionalProperties map[string]interface{}
}

type _PlanPrice PlanPrice

// NewPlanPrice instantiates a new PlanPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanPrice(id string, amount float64, currency string, priceDiffInfo NullablePriceDiffInfo, isEligibleForTrial bool) *PlanPrice {
	this := PlanPrice{}
	this.Id = id
	this.Amount = amount
	this.Currency = currency
	this.PriceDiffInfo = priceDiffInfo
	this.IsEligibleForTrial = isEligibleForTrial
	return &this
}

// NewPlanPriceWithDefaults instantiates a new PlanPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanPriceWithDefaults() *PlanPrice {
	this := PlanPrice{}
	return &this
}

// GetId returns the Id field value
func (o *PlanPrice) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlanPrice) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlanPrice) SetId(v string) {
	o.Id = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *PlanPrice) GetInterval() Interval {
	if o == nil || IsNil(o.Interval) {
		var ret Interval
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanPrice) GetIntervalOk() (*Interval, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *PlanPrice) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given Interval and assigns it to the Interval field.
func (o *PlanPrice) SetInterval(v Interval) {
	o.Interval = &v
}

// GetAmount returns the Amount field value
func (o *PlanPrice) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PlanPrice) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PlanPrice) SetAmount(v float64) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *PlanPrice) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PlanPrice) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PlanPrice) SetCurrency(v string) {
	o.Currency = v
}

// GetTrialDays returns the TrialDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanPrice) GetTrialDays() int64 {
	if o == nil || IsNil(o.TrialDays.Get()) {
		var ret int64
		return ret
	}
	return *o.TrialDays.Get()
}

// GetTrialDaysOk returns a tuple with the TrialDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanPrice) GetTrialDaysOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrialDays.Get(), o.TrialDays.IsSet()
}

// HasTrialDays returns a boolean if a field has been set.
func (o *PlanPrice) HasTrialDays() bool {
	if o != nil && o.TrialDays.IsSet() {
		return true
	}

	return false
}

// SetTrialDays gets a reference to the given NullableInt64 and assigns it to the TrialDays field.
func (o *PlanPrice) SetTrialDays(v int64) {
	o.TrialDays.Set(&v)
}
// SetTrialDaysNil sets the value for TrialDays to be an explicit nil
func (o *PlanPrice) SetTrialDaysNil() {
	o.TrialDays.Set(nil)
}

// UnsetTrialDays ensures that no value is present for TrialDays, not even an explicit nil
func (o *PlanPrice) UnsetTrialDays() {
	o.TrialDays.Unset()
}

// GetPriceDiffInfo returns the PriceDiffInfo field value
// If the value is explicit nil, the zero value for PriceDiffInfo will be returned
func (o *PlanPrice) GetPriceDiffInfo() PriceDiffInfo {
	if o == nil || o.PriceDiffInfo.Get() == nil {
		var ret PriceDiffInfo
		return ret
	}

	return *o.PriceDiffInfo.Get()
}

// GetPriceDiffInfoOk returns a tuple with the PriceDiffInfo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanPrice) GetPriceDiffInfoOk() (*PriceDiffInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceDiffInfo.Get(), o.PriceDiffInfo.IsSet()
}

// SetPriceDiffInfo sets field value
func (o *PlanPrice) SetPriceDiffInfo(v PriceDiffInfo) {
	o.PriceDiffInfo.Set(&v)
}

// GetIsMostPopular returns the IsMostPopular field value if set, zero value otherwise.
func (o *PlanPrice) GetIsMostPopular() bool {
	if o == nil || IsNil(o.IsMostPopular) {
		var ret bool
		return ret
	}
	return *o.IsMostPopular
}

// GetIsMostPopularOk returns a tuple with the IsMostPopular field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanPrice) GetIsMostPopularOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMostPopular) {
		return nil, false
	}
	return o.IsMostPopular, true
}

// HasIsMostPopular returns a boolean if a field has been set.
func (o *PlanPrice) HasIsMostPopular() bool {
	if o != nil && !IsNil(o.IsMostPopular) {
		return true
	}

	return false
}

// SetIsMostPopular gets a reference to the given bool and assigns it to the IsMostPopular field.
func (o *PlanPrice) SetIsMostPopular(v bool) {
	o.IsMostPopular = &v
}

// GetIsEligibleForTrial returns the IsEligibleForTrial field value
func (o *PlanPrice) GetIsEligibleForTrial() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEligibleForTrial
}

// GetIsEligibleForTrialOk returns a tuple with the IsEligibleForTrial field value
// and a boolean to check if the value has been set.
func (o *PlanPrice) GetIsEligibleForTrialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEligibleForTrial, true
}

// SetIsEligibleForTrial sets field value
func (o *PlanPrice) SetIsEligibleForTrial(v bool) {
	o.IsEligibleForTrial = v
}

func (o PlanPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	if o.TrialDays.IsSet() {
		toSerialize["trial_days"] = o.TrialDays.Get()
	}
	toSerialize["price_diff_info"] = o.PriceDiffInfo.Get()
	if !IsNil(o.IsMostPopular) {
		toSerialize["is_most_popular"] = o.IsMostPopular
	}
	toSerialize["is_eligible_for_trial"] = o.IsEligibleForTrial

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanPrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"amount",
		"currency",
		"price_diff_info",
		"is_eligible_for_trial",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanPrice := _PlanPrice{}

	err = json.Unmarshal(data, &varPlanPrice)

	if err != nil {
		return err
	}

	*o = PlanPrice(varPlanPrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "trial_days")
		delete(additionalProperties, "price_diff_info")
		delete(additionalProperties, "is_most_popular")
		delete(additionalProperties, "is_eligible_for_trial")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanPrice struct {
	value *PlanPrice
	isSet bool
}

func (v NullablePlanPrice) Get() *PlanPrice {
	return v.value
}

func (v *NullablePlanPrice) Set(val *PlanPrice) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanPrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanPrice(val *PlanPrice) *NullablePlanPrice {
	return &NullablePlanPrice{value: val, isSet: true}
}

func (v NullablePlanPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


