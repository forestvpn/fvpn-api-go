/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeDevice{}

// NodeDevice struct for NodeDevice
type NodeDevice struct {
	Ipv4 string `json:"ipv4"`
	Ipv6 string `json:"ipv6"`
	PubKey string `json:"pub_key"`
	PsKey string `json:"ps_key"`
}

type _NodeDevice NodeDevice

// NewNodeDevice instantiates a new NodeDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeDevice(ipv4 string, ipv6 string, pubKey string, psKey string) *NodeDevice {
	this := NodeDevice{}
	this.Ipv4 = ipv4
	this.Ipv6 = ipv6
	this.PubKey = pubKey
	this.PsKey = psKey
	return &this
}

// NewNodeDeviceWithDefaults instantiates a new NodeDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeDeviceWithDefaults() *NodeDevice {
	this := NodeDevice{}
	return &this
}

// GetIpv4 returns the Ipv4 field value
func (o *NodeDevice) GetIpv4() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value
// and a boolean to check if the value has been set.
func (o *NodeDevice) GetIpv4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4, true
}

// SetIpv4 sets field value
func (o *NodeDevice) SetIpv4(v string) {
	o.Ipv4 = v
}

// GetIpv6 returns the Ipv6 field value
func (o *NodeDevice) GetIpv6() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value
// and a boolean to check if the value has been set.
func (o *NodeDevice) GetIpv6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv6, true
}

// SetIpv6 sets field value
func (o *NodeDevice) SetIpv6(v string) {
	o.Ipv6 = v
}

// GetPubKey returns the PubKey field value
func (o *NodeDevice) GetPubKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value
// and a boolean to check if the value has been set.
func (o *NodeDevice) GetPubKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PubKey, true
}

// SetPubKey sets field value
func (o *NodeDevice) SetPubKey(v string) {
	o.PubKey = v
}

// GetPsKey returns the PsKey field value
func (o *NodeDevice) GetPsKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PsKey
}

// GetPsKeyOk returns a tuple with the PsKey field value
// and a boolean to check if the value has been set.
func (o *NodeDevice) GetPsKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PsKey, true
}

// SetPsKey sets field value
func (o *NodeDevice) SetPsKey(v string) {
	o.PsKey = v
}

func (o NodeDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ipv4"] = o.Ipv4
	toSerialize["ipv6"] = o.Ipv6
	toSerialize["pub_key"] = o.PubKey
	toSerialize["ps_key"] = o.PsKey
	return toSerialize, nil
}

func (o *NodeDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ipv4",
		"ipv6",
		"pub_key",
		"ps_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeDevice := _NodeDevice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeDevice)

	if err != nil {
		return err
	}

	*o = NodeDevice(varNodeDevice)

	return err
}

type NullableNodeDevice struct {
	value *NodeDevice
	isSet bool
}

func (v NullableNodeDevice) Get() *NodeDevice {
	return v.value
}

func (v *NullableNodeDevice) Set(val *NodeDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeDevice(val *NodeDevice) *NullableNodeDevice {
	return &NullableNodeDevice{value: val, isSet: true}
}

func (v NullableNodeDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


