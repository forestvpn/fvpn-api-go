/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the SummaryPeriod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SummaryPeriod{}

// SummaryPeriod Serializer for a period's summary data.
type SummaryPeriod struct {
	Period Period `json:"period"`
	Data []DataPoint `json:"data"`
	Total int64 `json:"total"`
	AdditionalProperties map[string]interface{}
}

type _SummaryPeriod SummaryPeriod

// NewSummaryPeriod instantiates a new SummaryPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryPeriod(period Period, data []DataPoint, total int64) *SummaryPeriod {
	this := SummaryPeriod{}
	this.Period = period
	this.Data = data
	this.Total = total
	return &this
}

// NewSummaryPeriodWithDefaults instantiates a new SummaryPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryPeriodWithDefaults() *SummaryPeriod {
	this := SummaryPeriod{}
	return &this
}

// GetPeriod returns the Period field value
func (o *SummaryPeriod) GetPeriod() Period {
	if o == nil {
		var ret Period
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *SummaryPeriod) GetPeriodOk() (*Period, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *SummaryPeriod) SetPeriod(v Period) {
	o.Period = v
}

// GetData returns the Data field value
func (o *SummaryPeriod) GetData() []DataPoint {
	if o == nil {
		var ret []DataPoint
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SummaryPeriod) GetDataOk() ([]DataPoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *SummaryPeriod) SetData(v []DataPoint) {
	o.Data = v
}

// GetTotal returns the Total field value
func (o *SummaryPeriod) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *SummaryPeriod) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *SummaryPeriod) SetTotal(v int64) {
	o.Total = v
}

func (o SummaryPeriod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SummaryPeriod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["period"] = o.Period
	toSerialize["data"] = o.Data
	toSerialize["total"] = o.Total

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SummaryPeriod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"period",
		"data",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSummaryPeriod := _SummaryPeriod{}

	err = json.Unmarshal(data, &varSummaryPeriod)

	if err != nil {
		return err
	}

	*o = SummaryPeriod(varSummaryPeriod)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "period")
		delete(additionalProperties, "data")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSummaryPeriod struct {
	value *SummaryPeriod
	isSet bool
}

func (v NullableSummaryPeriod) Get() *SummaryPeriod {
	return v.value
}

func (v *NullableSummaryPeriod) Set(val *SummaryPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryPeriod(val *SummaryPeriod) *NullableSummaryPeriod {
	return &NullableSummaryPeriod{value: val, isSet: true}
}

func (v NullableSummaryPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


