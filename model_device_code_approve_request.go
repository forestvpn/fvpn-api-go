/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceCodeApproveRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceCodeApproveRequest{}

// DeviceCodeApproveRequest Serializer for approving device authentication codes.  Used for POST /v1/account/codes/approve/ endpoint. Requires authentication and validates the code.
type DeviceCodeApproveRequest struct {
	// 6-character device authentication code to approve
	Code string `json:"code"`
	AdditionalProperties map[string]interface{}
}

type _DeviceCodeApproveRequest DeviceCodeApproveRequest

// NewDeviceCodeApproveRequest instantiates a new DeviceCodeApproveRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceCodeApproveRequest(code string) *DeviceCodeApproveRequest {
	this := DeviceCodeApproveRequest{}
	this.Code = code
	return &this
}

// NewDeviceCodeApproveRequestWithDefaults instantiates a new DeviceCodeApproveRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceCodeApproveRequestWithDefaults() *DeviceCodeApproveRequest {
	this := DeviceCodeApproveRequest{}
	return &this
}

// GetCode returns the Code field value
func (o *DeviceCodeApproveRequest) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *DeviceCodeApproveRequest) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *DeviceCodeApproveRequest) SetCode(v string) {
	o.Code = v
}

func (o DeviceCodeApproveRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceCodeApproveRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceCodeApproveRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceCodeApproveRequest := _DeviceCodeApproveRequest{}

	err = json.Unmarshal(data, &varDeviceCodeApproveRequest)

	if err != nil {
		return err
	}

	*o = DeviceCodeApproveRequest(varDeviceCodeApproveRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceCodeApproveRequest struct {
	value *DeviceCodeApproveRequest
	isSet bool
}

func (v NullableDeviceCodeApproveRequest) Get() *DeviceCodeApproveRequest {
	return v.value
}

func (v *NullableDeviceCodeApproveRequest) Set(val *DeviceCodeApproveRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCodeApproveRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCodeApproveRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCodeApproveRequest(val *DeviceCodeApproveRequest) *NullableDeviceCodeApproveRequest {
	return &NullableDeviceCodeApproveRequest{value: val, isSet: true}
}

func (v NullableDeviceCodeApproveRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCodeApproveRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


