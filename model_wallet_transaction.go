/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the WalletTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletTransaction{}

// WalletTransaction Serializer for wallet transactions.
type WalletTransaction struct {
	Id string `json:"id"`
	TransactionType TransactionType `json:"transaction_type"`
	// Transaction amount in credits
	Credits float64 `json:"credits"`
	// Return the amount in the specified currency.
	Amount float32 `json:"amount"`
	// Currency of the transaction amount
	Currency string `json:"currency"`
	Description string `json:"description"`
	CreatedAt time.Time `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _WalletTransaction WalletTransaction

// NewWalletTransaction instantiates a new WalletTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletTransaction(id string, transactionType TransactionType, credits float64, amount float32, currency string, description string, createdAt time.Time) *WalletTransaction {
	this := WalletTransaction{}
	this.Id = id
	this.TransactionType = transactionType
	this.Credits = credits
	this.Amount = amount
	this.Currency = currency
	this.Description = description
	this.CreatedAt = createdAt
	return &this
}

// NewWalletTransactionWithDefaults instantiates a new WalletTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletTransactionWithDefaults() *WalletTransaction {
	this := WalletTransaction{}
	return &this
}

// GetId returns the Id field value
func (o *WalletTransaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WalletTransaction) SetId(v string) {
	o.Id = v
}

// GetTransactionType returns the TransactionType field value
func (o *WalletTransaction) GetTransactionType() TransactionType {
	if o == nil {
		var ret TransactionType
		return ret
	}

	return o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetTransactionTypeOk() (*TransactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionType, true
}

// SetTransactionType sets field value
func (o *WalletTransaction) SetTransactionType(v TransactionType) {
	o.TransactionType = v
}

// GetCredits returns the Credits field value
func (o *WalletTransaction) GetCredits() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Credits
}

// GetCreditsOk returns a tuple with the Credits field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetCreditsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credits, true
}

// SetCredits sets field value
func (o *WalletTransaction) SetCredits(v float64) {
	o.Credits = v
}

// GetAmount returns the Amount field value
func (o *WalletTransaction) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *WalletTransaction) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *WalletTransaction) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *WalletTransaction) SetCurrency(v string) {
	o.Currency = v
}

// GetDescription returns the Description field value
func (o *WalletTransaction) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *WalletTransaction) SetDescription(v string) {
	o.Description = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WalletTransaction) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WalletTransaction) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o WalletTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["transaction_type"] = o.TransactionType
	toSerialize["credits"] = o.Credits
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["description"] = o.Description
	toSerialize["created_at"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WalletTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"transaction_type",
		"credits",
		"amount",
		"currency",
		"description",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletTransaction := _WalletTransaction{}

	err = json.Unmarshal(data, &varWalletTransaction)

	if err != nil {
		return err
	}

	*o = WalletTransaction(varWalletTransaction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "transaction_type")
		delete(additionalProperties, "credits")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "description")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWalletTransaction struct {
	value *WalletTransaction
	isSet bool
}

func (v NullableWalletTransaction) Get() *WalletTransaction {
	return v.value
}

func (v *NullableWalletTransaction) Set(val *WalletTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletTransaction(val *WalletTransaction) *NullableWalletTransaction {
	return &NullableWalletTransaction{value: val, isSet: true}
}

func (v NullableWalletTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


