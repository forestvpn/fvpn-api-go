/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the PriceDiffInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceDiffInfo{}

// PriceDiffInfo struct for PriceDiffInfo
type PriceDiffInfo struct {
	Amount float64 `json:"amount"`
	Currency string `json:"currency"`
	Interval string `json:"interval"`
	Discount int64 `json:"discount"`
	SaveAmount float64 `json:"save_amount"`
	SaveAmountTotal int64 `json:"save_amount_total"`
	AdditionalProperties map[string]interface{}
}

type _PriceDiffInfo PriceDiffInfo

// NewPriceDiffInfo instantiates a new PriceDiffInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceDiffInfo(amount float64, currency string, interval string, discount int64, saveAmount float64, saveAmountTotal int64) *PriceDiffInfo {
	this := PriceDiffInfo{}
	this.Amount = amount
	this.Currency = currency
	this.Interval = interval
	this.Discount = discount
	this.SaveAmount = saveAmount
	this.SaveAmountTotal = saveAmountTotal
	return &this
}

// NewPriceDiffInfoWithDefaults instantiates a new PriceDiffInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceDiffInfoWithDefaults() *PriceDiffInfo {
	this := PriceDiffInfo{}
	return &this
}

// GetAmount returns the Amount field value
func (o *PriceDiffInfo) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PriceDiffInfo) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PriceDiffInfo) SetAmount(v float64) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *PriceDiffInfo) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PriceDiffInfo) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PriceDiffInfo) SetCurrency(v string) {
	o.Currency = v
}

// GetInterval returns the Interval field value
func (o *PriceDiffInfo) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *PriceDiffInfo) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *PriceDiffInfo) SetInterval(v string) {
	o.Interval = v
}

// GetDiscount returns the Discount field value
func (o *PriceDiffInfo) GetDiscount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value
// and a boolean to check if the value has been set.
func (o *PriceDiffInfo) GetDiscountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Discount, true
}

// SetDiscount sets field value
func (o *PriceDiffInfo) SetDiscount(v int64) {
	o.Discount = v
}

// GetSaveAmount returns the SaveAmount field value
func (o *PriceDiffInfo) GetSaveAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.SaveAmount
}

// GetSaveAmountOk returns a tuple with the SaveAmount field value
// and a boolean to check if the value has been set.
func (o *PriceDiffInfo) GetSaveAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaveAmount, true
}

// SetSaveAmount sets field value
func (o *PriceDiffInfo) SetSaveAmount(v float64) {
	o.SaveAmount = v
}

// GetSaveAmountTotal returns the SaveAmountTotal field value
func (o *PriceDiffInfo) GetSaveAmountTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SaveAmountTotal
}

// GetSaveAmountTotalOk returns a tuple with the SaveAmountTotal field value
// and a boolean to check if the value has been set.
func (o *PriceDiffInfo) GetSaveAmountTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaveAmountTotal, true
}

// SetSaveAmountTotal sets field value
func (o *PriceDiffInfo) SetSaveAmountTotal(v int64) {
	o.SaveAmountTotal = v
}

func (o PriceDiffInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceDiffInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["interval"] = o.Interval
	toSerialize["discount"] = o.Discount
	toSerialize["save_amount"] = o.SaveAmount
	toSerialize["save_amount_total"] = o.SaveAmountTotal

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PriceDiffInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"currency",
		"interval",
		"discount",
		"save_amount",
		"save_amount_total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPriceDiffInfo := _PriceDiffInfo{}

	err = json.Unmarshal(data, &varPriceDiffInfo)

	if err != nil {
		return err
	}

	*o = PriceDiffInfo(varPriceDiffInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "discount")
		delete(additionalProperties, "save_amount")
		delete(additionalProperties, "save_amount_total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePriceDiffInfo struct {
	value *PriceDiffInfo
	isSet bool
}

func (v NullablePriceDiffInfo) Get() *PriceDiffInfo {
	return v.value
}

func (v *NullablePriceDiffInfo) Set(val *PriceDiffInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceDiffInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceDiffInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceDiffInfo(val *PriceDiffInfo) *NullablePriceDiffInfo {
	return &NullablePriceDiffInfo{value: val, isSet: true}
}

func (v NullablePriceDiffInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceDiffInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


