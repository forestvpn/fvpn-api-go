/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Node type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Node{}

// Node struct for Node
type Node struct {
	Id string `json:"id"`
	Hostname string `json:"hostname" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	IpAddresses []string `json:"ip_addresses"`
	Subnets []string `json:"subnets,omitempty"`
	Tags []string `json:"tags"`
	IsExitNode bool `json:"is_exit_node"`
	IsPublic *bool `json:"is_public,omitempty"`
	PubKey string `json:"pub_key"`
	Ports []string `json:"ports"`
	// Ports used for HTTPs Proxy
	HttpsProxyPorts []string `json:"https_proxy_ports,omitempty"`
	// Ports used for Shadow Socket Bridge
	SsBridgePorts []string `json:"ss_bridge_ports,omitempty"`
	Conditions []NodeCondition `json:"conditions"`
	Status *NodeStatus `json:"status,omitempty"`
	Os NullableString `json:"os,omitempty"`
	OsVersion NullableString `json:"os_version,omitempty"`
	OsArch NullableString `json:"os_arch,omitempty"`
	Distro NullableString `json:"distro,omitempty"`
	DistroVersion NullableString `json:"distro_version,omitempty"`
	DistroCodename NullableString `json:"distro_codename,omitempty"`
	AppVersion NullableString `json:"app_version,omitempty"`
	AppBuild NullableString `json:"app_build,omitempty"`
	LastActiveAt NullableTime `json:"last_active_at"`
	IpDetails []IPInfo `json:"ip_details"`
	AdditionalProperties map[string]interface{}
}

type _Node Node

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode(id string, hostname string, ipAddresses []string, tags []string, isExitNode bool, pubKey string, ports []string, conditions []NodeCondition, lastActiveAt NullableTime, ipDetails []IPInfo) *Node {
	this := Node{}
	this.Id = id
	this.Hostname = hostname
	this.IpAddresses = ipAddresses
	this.Tags = tags
	this.IsExitNode = isExitNode
	this.PubKey = pubKey
	this.Ports = ports
	this.Conditions = conditions
	this.LastActiveAt = lastActiveAt
	this.IpDetails = ipDetails
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	return &this
}

// GetId returns the Id field value
func (o *Node) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Node) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Node) SetId(v string) {
	o.Id = v
}

// GetHostname returns the Hostname field value
func (o *Node) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *Node) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *Node) SetHostname(v string) {
	o.Hostname = v
}

// GetIpAddresses returns the IpAddresses field value
func (o *Node) GetIpAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value
// and a boolean to check if the value has been set.
func (o *Node) GetIpAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddresses, true
}

// SetIpAddresses sets field value
func (o *Node) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetSubnets() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *Node) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *Node) SetSubnets(v []string) {
	o.Subnets = v
}

// GetTags returns the Tags field value
func (o *Node) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Node) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Node) SetTags(v []string) {
	o.Tags = v
}

// GetIsExitNode returns the IsExitNode field value
func (o *Node) GetIsExitNode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsExitNode
}

// GetIsExitNodeOk returns a tuple with the IsExitNode field value
// and a boolean to check if the value has been set.
func (o *Node) GetIsExitNodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsExitNode, true
}

// SetIsExitNode sets field value
func (o *Node) SetIsExitNode(v bool) {
	o.IsExitNode = v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *Node) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *Node) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *Node) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetPubKey returns the PubKey field value
func (o *Node) GetPubKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value
// and a boolean to check if the value has been set.
func (o *Node) GetPubKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PubKey, true
}

// SetPubKey sets field value
func (o *Node) SetPubKey(v string) {
	o.PubKey = v
}

// GetPorts returns the Ports field value
func (o *Node) GetPorts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value
// and a boolean to check if the value has been set.
func (o *Node) GetPortsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ports, true
}

// SetPorts sets field value
func (o *Node) SetPorts(v []string) {
	o.Ports = v
}

// GetHttpsProxyPorts returns the HttpsProxyPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetHttpsProxyPorts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HttpsProxyPorts
}

// GetHttpsProxyPortsOk returns a tuple with the HttpsProxyPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetHttpsProxyPortsOk() ([]string, bool) {
	if o == nil || IsNil(o.HttpsProxyPorts) {
		return nil, false
	}
	return o.HttpsProxyPorts, true
}

// HasHttpsProxyPorts returns a boolean if a field has been set.
func (o *Node) HasHttpsProxyPorts() bool {
	if o != nil && !IsNil(o.HttpsProxyPorts) {
		return true
	}

	return false
}

// SetHttpsProxyPorts gets a reference to the given []string and assigns it to the HttpsProxyPorts field.
func (o *Node) SetHttpsProxyPorts(v []string) {
	o.HttpsProxyPorts = v
}

// GetSsBridgePorts returns the SsBridgePorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetSsBridgePorts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SsBridgePorts
}

// GetSsBridgePortsOk returns a tuple with the SsBridgePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetSsBridgePortsOk() ([]string, bool) {
	if o == nil || IsNil(o.SsBridgePorts) {
		return nil, false
	}
	return o.SsBridgePorts, true
}

// HasSsBridgePorts returns a boolean if a field has been set.
func (o *Node) HasSsBridgePorts() bool {
	if o != nil && !IsNil(o.SsBridgePorts) {
		return true
	}

	return false
}

// SetSsBridgePorts gets a reference to the given []string and assigns it to the SsBridgePorts field.
func (o *Node) SetSsBridgePorts(v []string) {
	o.SsBridgePorts = v
}

// GetConditions returns the Conditions field value
func (o *Node) GetConditions() []NodeCondition {
	if o == nil {
		var ret []NodeCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *Node) GetConditionsOk() ([]NodeCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *Node) SetConditions(v []NodeCondition) {
	o.Conditions = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Node) GetStatus() NodeStatus {
	if o == nil || IsNil(o.Status) {
		var ret NodeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetStatusOk() (*NodeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Node) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NodeStatus and assigns it to the Status field.
func (o *Node) SetStatus(v NodeStatus) {
	o.Status = &v
}

// GetOs returns the Os field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetOs() string {
	if o == nil || IsNil(o.Os.Get()) {
		var ret string
		return ret
	}
	return *o.Os.Get()
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Os.Get(), o.Os.IsSet()
}

// HasOs returns a boolean if a field has been set.
func (o *Node) HasOs() bool {
	if o != nil && o.Os.IsSet() {
		return true
	}

	return false
}

// SetOs gets a reference to the given NullableString and assigns it to the Os field.
func (o *Node) SetOs(v string) {
	o.Os.Set(&v)
}
// SetOsNil sets the value for Os to be an explicit nil
func (o *Node) SetOsNil() {
	o.Os.Set(nil)
}

// UnsetOs ensures that no value is present for Os, not even an explicit nil
func (o *Node) UnsetOs() {
	o.Os.Unset()
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion.Get()) {
		var ret string
		return ret
	}
	return *o.OsVersion.Get()
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetOsVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsVersion.Get(), o.OsVersion.IsSet()
}

// HasOsVersion returns a boolean if a field has been set.
func (o *Node) HasOsVersion() bool {
	if o != nil && o.OsVersion.IsSet() {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given NullableString and assigns it to the OsVersion field.
func (o *Node) SetOsVersion(v string) {
	o.OsVersion.Set(&v)
}
// SetOsVersionNil sets the value for OsVersion to be an explicit nil
func (o *Node) SetOsVersionNil() {
	o.OsVersion.Set(nil)
}

// UnsetOsVersion ensures that no value is present for OsVersion, not even an explicit nil
func (o *Node) UnsetOsVersion() {
	o.OsVersion.Unset()
}

// GetOsArch returns the OsArch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetOsArch() string {
	if o == nil || IsNil(o.OsArch.Get()) {
		var ret string
		return ret
	}
	return *o.OsArch.Get()
}

// GetOsArchOk returns a tuple with the OsArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetOsArchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsArch.Get(), o.OsArch.IsSet()
}

// HasOsArch returns a boolean if a field has been set.
func (o *Node) HasOsArch() bool {
	if o != nil && o.OsArch.IsSet() {
		return true
	}

	return false
}

// SetOsArch gets a reference to the given NullableString and assigns it to the OsArch field.
func (o *Node) SetOsArch(v string) {
	o.OsArch.Set(&v)
}
// SetOsArchNil sets the value for OsArch to be an explicit nil
func (o *Node) SetOsArchNil() {
	o.OsArch.Set(nil)
}

// UnsetOsArch ensures that no value is present for OsArch, not even an explicit nil
func (o *Node) UnsetOsArch() {
	o.OsArch.Unset()
}

// GetDistro returns the Distro field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetDistro() string {
	if o == nil || IsNil(o.Distro.Get()) {
		var ret string
		return ret
	}
	return *o.Distro.Get()
}

// GetDistroOk returns a tuple with the Distro field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetDistroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Distro.Get(), o.Distro.IsSet()
}

// HasDistro returns a boolean if a field has been set.
func (o *Node) HasDistro() bool {
	if o != nil && o.Distro.IsSet() {
		return true
	}

	return false
}

// SetDistro gets a reference to the given NullableString and assigns it to the Distro field.
func (o *Node) SetDistro(v string) {
	o.Distro.Set(&v)
}
// SetDistroNil sets the value for Distro to be an explicit nil
func (o *Node) SetDistroNil() {
	o.Distro.Set(nil)
}

// UnsetDistro ensures that no value is present for Distro, not even an explicit nil
func (o *Node) UnsetDistro() {
	o.Distro.Unset()
}

// GetDistroVersion returns the DistroVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetDistroVersion() string {
	if o == nil || IsNil(o.DistroVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DistroVersion.Get()
}

// GetDistroVersionOk returns a tuple with the DistroVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetDistroVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistroVersion.Get(), o.DistroVersion.IsSet()
}

// HasDistroVersion returns a boolean if a field has been set.
func (o *Node) HasDistroVersion() bool {
	if o != nil && o.DistroVersion.IsSet() {
		return true
	}

	return false
}

// SetDistroVersion gets a reference to the given NullableString and assigns it to the DistroVersion field.
func (o *Node) SetDistroVersion(v string) {
	o.DistroVersion.Set(&v)
}
// SetDistroVersionNil sets the value for DistroVersion to be an explicit nil
func (o *Node) SetDistroVersionNil() {
	o.DistroVersion.Set(nil)
}

// UnsetDistroVersion ensures that no value is present for DistroVersion, not even an explicit nil
func (o *Node) UnsetDistroVersion() {
	o.DistroVersion.Unset()
}

// GetDistroCodename returns the DistroCodename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetDistroCodename() string {
	if o == nil || IsNil(o.DistroCodename.Get()) {
		var ret string
		return ret
	}
	return *o.DistroCodename.Get()
}

// GetDistroCodenameOk returns a tuple with the DistroCodename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetDistroCodenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistroCodename.Get(), o.DistroCodename.IsSet()
}

// HasDistroCodename returns a boolean if a field has been set.
func (o *Node) HasDistroCodename() bool {
	if o != nil && o.DistroCodename.IsSet() {
		return true
	}

	return false
}

// SetDistroCodename gets a reference to the given NullableString and assigns it to the DistroCodename field.
func (o *Node) SetDistroCodename(v string) {
	o.DistroCodename.Set(&v)
}
// SetDistroCodenameNil sets the value for DistroCodename to be an explicit nil
func (o *Node) SetDistroCodenameNil() {
	o.DistroCodename.Set(nil)
}

// UnsetDistroCodename ensures that no value is present for DistroCodename, not even an explicit nil
func (o *Node) UnsetDistroCodename() {
	o.DistroCodename.Unset()
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetAppVersion() string {
	if o == nil || IsNil(o.AppVersion.Get()) {
		var ret string
		return ret
	}
	return *o.AppVersion.Get()
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetAppVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppVersion.Get(), o.AppVersion.IsSet()
}

// HasAppVersion returns a boolean if a field has been set.
func (o *Node) HasAppVersion() bool {
	if o != nil && o.AppVersion.IsSet() {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given NullableString and assigns it to the AppVersion field.
func (o *Node) SetAppVersion(v string) {
	o.AppVersion.Set(&v)
}
// SetAppVersionNil sets the value for AppVersion to be an explicit nil
func (o *Node) SetAppVersionNil() {
	o.AppVersion.Set(nil)
}

// UnsetAppVersion ensures that no value is present for AppVersion, not even an explicit nil
func (o *Node) UnsetAppVersion() {
	o.AppVersion.Unset()
}

// GetAppBuild returns the AppBuild field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetAppBuild() string {
	if o == nil || IsNil(o.AppBuild.Get()) {
		var ret string
		return ret
	}
	return *o.AppBuild.Get()
}

// GetAppBuildOk returns a tuple with the AppBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetAppBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppBuild.Get(), o.AppBuild.IsSet()
}

// HasAppBuild returns a boolean if a field has been set.
func (o *Node) HasAppBuild() bool {
	if o != nil && o.AppBuild.IsSet() {
		return true
	}

	return false
}

// SetAppBuild gets a reference to the given NullableString and assigns it to the AppBuild field.
func (o *Node) SetAppBuild(v string) {
	o.AppBuild.Set(&v)
}
// SetAppBuildNil sets the value for AppBuild to be an explicit nil
func (o *Node) SetAppBuildNil() {
	o.AppBuild.Set(nil)
}

// UnsetAppBuild ensures that no value is present for AppBuild, not even an explicit nil
func (o *Node) UnsetAppBuild() {
	o.AppBuild.Unset()
}

// GetLastActiveAt returns the LastActiveAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Node) GetLastActiveAt() time.Time {
	if o == nil || o.LastActiveAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastActiveAt.Get()
}

// GetLastActiveAtOk returns a tuple with the LastActiveAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetLastActiveAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastActiveAt.Get(), o.LastActiveAt.IsSet()
}

// SetLastActiveAt sets field value
func (o *Node) SetLastActiveAt(v time.Time) {
	o.LastActiveAt.Set(&v)
}

// GetIpDetails returns the IpDetails field value
func (o *Node) GetIpDetails() []IPInfo {
	if o == nil {
		var ret []IPInfo
		return ret
	}

	return o.IpDetails
}

// GetIpDetailsOk returns a tuple with the IpDetails field value
// and a boolean to check if the value has been set.
func (o *Node) GetIpDetailsOk() ([]IPInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpDetails, true
}

// SetIpDetails sets field value
func (o *Node) SetIpDetails(v []IPInfo) {
	o.IpDetails = v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Node) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["hostname"] = o.Hostname
	toSerialize["ip_addresses"] = o.IpAddresses
	if o.Subnets != nil {
		toSerialize["subnets"] = o.Subnets
	}
	toSerialize["tags"] = o.Tags
	toSerialize["is_exit_node"] = o.IsExitNode
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}
	toSerialize["pub_key"] = o.PubKey
	toSerialize["ports"] = o.Ports
	if o.HttpsProxyPorts != nil {
		toSerialize["https_proxy_ports"] = o.HttpsProxyPorts
	}
	if o.SsBridgePorts != nil {
		toSerialize["ss_bridge_ports"] = o.SsBridgePorts
	}
	toSerialize["conditions"] = o.Conditions
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Os.IsSet() {
		toSerialize["os"] = o.Os.Get()
	}
	if o.OsVersion.IsSet() {
		toSerialize["os_version"] = o.OsVersion.Get()
	}
	if o.OsArch.IsSet() {
		toSerialize["os_arch"] = o.OsArch.Get()
	}
	if o.Distro.IsSet() {
		toSerialize["distro"] = o.Distro.Get()
	}
	if o.DistroVersion.IsSet() {
		toSerialize["distro_version"] = o.DistroVersion.Get()
	}
	if o.DistroCodename.IsSet() {
		toSerialize["distro_codename"] = o.DistroCodename.Get()
	}
	if o.AppVersion.IsSet() {
		toSerialize["app_version"] = o.AppVersion.Get()
	}
	if o.AppBuild.IsSet() {
		toSerialize["app_build"] = o.AppBuild.Get()
	}
	toSerialize["last_active_at"] = o.LastActiveAt.Get()
	toSerialize["ip_details"] = o.IpDetails

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Node) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"hostname",
		"ip_addresses",
		"tags",
		"is_exit_node",
		"pub_key",
		"ports",
		"conditions",
		"last_active_at",
		"ip_details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNode := _Node{}

	err = json.Unmarshal(data, &varNode)

	if err != nil {
		return err
	}

	*o = Node(varNode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "ip_addresses")
		delete(additionalProperties, "subnets")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "is_exit_node")
		delete(additionalProperties, "is_public")
		delete(additionalProperties, "pub_key")
		delete(additionalProperties, "ports")
		delete(additionalProperties, "https_proxy_ports")
		delete(additionalProperties, "ss_bridge_ports")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "status")
		delete(additionalProperties, "os")
		delete(additionalProperties, "os_version")
		delete(additionalProperties, "os_arch")
		delete(additionalProperties, "distro")
		delete(additionalProperties, "distro_version")
		delete(additionalProperties, "distro_codename")
		delete(additionalProperties, "app_version")
		delete(additionalProperties, "app_build")
		delete(additionalProperties, "last_active_at")
		delete(additionalProperties, "ip_details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


