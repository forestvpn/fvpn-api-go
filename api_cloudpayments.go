/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CloudpaymentsAPIService CloudpaymentsAPI service
type CloudpaymentsAPIService service

type ApiCompleteCloudpaymentsPaymentMethodThreeDsRequest struct {
	ctx context.Context
	ApiService *CloudpaymentsAPIService
	paymentMethodId string
	cloudPaymentsThreeDSecureCompleteRequest *CloudPaymentsThreeDSecureCompleteRequest
}

func (r ApiCompleteCloudpaymentsPaymentMethodThreeDsRequest) CloudPaymentsThreeDSecureCompleteRequest(cloudPaymentsThreeDSecureCompleteRequest CloudPaymentsThreeDSecureCompleteRequest) ApiCompleteCloudpaymentsPaymentMethodThreeDsRequest {
	r.cloudPaymentsThreeDSecureCompleteRequest = &cloudPaymentsThreeDSecureCompleteRequest
	return r
}

func (r ApiCompleteCloudpaymentsPaymentMethodThreeDsRequest) Execute() (*CloudPaymentsPaymentMethod, *http.Response, error) {
	return r.ApiService.CompleteCloudpaymentsPaymentMethodThreeDsExecute(r)
}

/*
CompleteCloudpaymentsPaymentMethodThreeDs Complete 3D Secure authentication

Endpoint to complete 3D Secure authentication for a payment method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId A UUID string identifying this Payment Method.
 @return ApiCompleteCloudpaymentsPaymentMethodThreeDsRequest
*/
func (a *CloudpaymentsAPIService) CompleteCloudpaymentsPaymentMethodThreeDs(ctx context.Context, paymentMethodId string) ApiCompleteCloudpaymentsPaymentMethodThreeDsRequest {
	return ApiCompleteCloudpaymentsPaymentMethodThreeDsRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return CloudPaymentsPaymentMethod
func (a *CloudpaymentsAPIService) CompleteCloudpaymentsPaymentMethodThreeDsExecute(r ApiCompleteCloudpaymentsPaymentMethodThreeDsRequest) (*CloudPaymentsPaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudPaymentsPaymentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudpaymentsAPIService.CompleteCloudpaymentsPaymentMethodThreeDs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/billing/cloudpayments/payment-methods/{payment_method_id}/complete-3ds/"
	localVarPath = strings.Replace(localVarPath, "{"+"payment_method_id"+"}", url.PathEscape(parameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudPaymentsThreeDSecureCompleteRequest == nil {
		return localVarReturnValue, nil, reportError("cloudPaymentsThreeDSecureCompleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudPaymentsThreeDSecureCompleteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCloudpaymentsPaymentMethodRequest struct {
	ctx context.Context
	ApiService *CloudpaymentsAPIService
	cloudPaymentsPaymentMethodCreateRequest *CloudPaymentsPaymentMethodCreateRequest
}

func (r ApiCreateCloudpaymentsPaymentMethodRequest) CloudPaymentsPaymentMethodCreateRequest(cloudPaymentsPaymentMethodCreateRequest CloudPaymentsPaymentMethodCreateRequest) ApiCreateCloudpaymentsPaymentMethodRequest {
	r.cloudPaymentsPaymentMethodCreateRequest = &cloudPaymentsPaymentMethodCreateRequest
	return r
}

func (r ApiCreateCloudpaymentsPaymentMethodRequest) Execute() (*CloudPaymentsPaymentMethod, *http.Response, error) {
	return r.ApiService.CreateCloudpaymentsPaymentMethodExecute(r)
}

/*
CreateCloudpaymentsPaymentMethod Create a new payment method

Endpoint to create a new payment method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCloudpaymentsPaymentMethodRequest
*/
func (a *CloudpaymentsAPIService) CreateCloudpaymentsPaymentMethod(ctx context.Context) ApiCreateCloudpaymentsPaymentMethodRequest {
	return ApiCreateCloudpaymentsPaymentMethodRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudPaymentsPaymentMethod
func (a *CloudpaymentsAPIService) CreateCloudpaymentsPaymentMethodExecute(r ApiCreateCloudpaymentsPaymentMethodRequest) (*CloudPaymentsPaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudPaymentsPaymentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudpaymentsAPIService.CreateCloudpaymentsPaymentMethod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/billing/cloudpayments/payment-methods/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudPaymentsPaymentMethodCreateRequest == nil {
		return localVarReturnValue, nil, reportError("cloudPaymentsPaymentMethodCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudPaymentsPaymentMethodCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCloudpaymentsPaymentMethodRequest struct {
	ctx context.Context
	ApiService *CloudpaymentsAPIService
	paymentMethodId string
}

func (r ApiGetCloudpaymentsPaymentMethodRequest) Execute() (*CloudPaymentsPaymentMethod, *http.Response, error) {
	return r.ApiService.GetCloudpaymentsPaymentMethodExecute(r)
}

/*
GetCloudpaymentsPaymentMethod Retrieve a payment method

Endpoint to retrieve a specific payment method by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param paymentMethodId A UUID string identifying this Payment Method.
 @return ApiGetCloudpaymentsPaymentMethodRequest
*/
func (a *CloudpaymentsAPIService) GetCloudpaymentsPaymentMethod(ctx context.Context, paymentMethodId string) ApiGetCloudpaymentsPaymentMethodRequest {
	return ApiGetCloudpaymentsPaymentMethodRequest{
		ApiService: a,
		ctx: ctx,
		paymentMethodId: paymentMethodId,
	}
}

// Execute executes the request
//  @return CloudPaymentsPaymentMethod
func (a *CloudpaymentsAPIService) GetCloudpaymentsPaymentMethodExecute(r ApiGetCloudpaymentsPaymentMethodRequest) (*CloudPaymentsPaymentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudPaymentsPaymentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudpaymentsAPIService.GetCloudpaymentsPaymentMethod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/billing/cloudpayments/payment-methods/{payment_method_id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"payment_method_id"+"}", url.PathEscape(parameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
