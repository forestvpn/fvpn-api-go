/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the CountryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryRequest{}

// CountryRequest struct for CountryRequest
type CountryRequest struct {
	Id string `json:"id"`
	Name string `json:"name"`
	OfficialName string `json:"official_name"`
	Alpha3 string `json:"alpha_3"`
	Numeric string `json:"numeric"`
	AdditionalProperties map[string]interface{}
}

type _CountryRequest CountryRequest

// NewCountryRequest instantiates a new CountryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryRequest(id string, name string, officialName string, alpha3 string, numeric string) *CountryRequest {
	this := CountryRequest{}
	this.Id = id
	this.Name = name
	this.OfficialName = officialName
	this.Alpha3 = alpha3
	this.Numeric = numeric
	return &this
}

// NewCountryRequestWithDefaults instantiates a new CountryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryRequestWithDefaults() *CountryRequest {
	this := CountryRequest{}
	return &this
}

// GetId returns the Id field value
func (o *CountryRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CountryRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CountryRequest) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CountryRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CountryRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CountryRequest) SetName(v string) {
	o.Name = v
}

// GetOfficialName returns the OfficialName field value
func (o *CountryRequest) GetOfficialName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfficialName
}

// GetOfficialNameOk returns a tuple with the OfficialName field value
// and a boolean to check if the value has been set.
func (o *CountryRequest) GetOfficialNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfficialName, true
}

// SetOfficialName sets field value
func (o *CountryRequest) SetOfficialName(v string) {
	o.OfficialName = v
}

// GetAlpha3 returns the Alpha3 field value
func (o *CountryRequest) GetAlpha3() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alpha3
}

// GetAlpha3Ok returns a tuple with the Alpha3 field value
// and a boolean to check if the value has been set.
func (o *CountryRequest) GetAlpha3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alpha3, true
}

// SetAlpha3 sets field value
func (o *CountryRequest) SetAlpha3(v string) {
	o.Alpha3 = v
}

// GetNumeric returns the Numeric field value
func (o *CountryRequest) GetNumeric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Numeric
}

// GetNumericOk returns a tuple with the Numeric field value
// and a boolean to check if the value has been set.
func (o *CountryRequest) GetNumericOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Numeric, true
}

// SetNumeric sets field value
func (o *CountryRequest) SetNumeric(v string) {
	o.Numeric = v
}

func (o CountryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["official_name"] = o.OfficialName
	toSerialize["alpha_3"] = o.Alpha3
	toSerialize["numeric"] = o.Numeric

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CountryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"official_name",
		"alpha_3",
		"numeric",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountryRequest := _CountryRequest{}

	err = json.Unmarshal(data, &varCountryRequest)

	if err != nil {
		return err
	}

	*o = CountryRequest(varCountryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "official_name")
		delete(additionalProperties, "alpha_3")
		delete(additionalProperties, "numeric")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCountryRequest struct {
	value *CountryRequest
	isSet bool
}

func (v NullableCountryRequest) Get() *CountryRequest {
	return v.value
}

func (v *NullableCountryRequest) Set(val *CountryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryRequest(val *CountryRequest) *NullableCountryRequest {
	return &NullableCountryRequest{value: val, isSet: true}
}

func (v NullableCountryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


