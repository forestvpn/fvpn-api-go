/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceRequest{}

// DeviceRequest struct for DeviceRequest
type DeviceRequest struct {
	ExternalKey NullableString `json:"external_key,omitempty"`
	Name *string `json:"name,omitempty"`
	PubKey string `json:"pub_key"`
	RawPassword *string `json:"raw_password,omitempty"`
	// Bcrypt Hashed Password for Authentication, e.g. HTTP Proxy
	Password NullableString `json:"password,omitempty"`
	Os NullableString `json:"os,omitempty"`
	OsVersion NullableString `json:"os_version,omitempty"`
	OsArch NullableString `json:"os_arch,omitempty"`
	Distro NullableString `json:"distro,omitempty"`
	DistroVersion NullableString `json:"distro_version,omitempty"`
	DistroCodename NullableString `json:"distro_codename,omitempty"`
	AppVersion NullableString `json:"app_version,omitempty"`
	AppBuild NullableString `json:"app_build,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceRequest DeviceRequest

// NewDeviceRequest instantiates a new DeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceRequest(pubKey string) *DeviceRequest {
	this := DeviceRequest{}
	this.PubKey = pubKey
	return &this
}

// NewDeviceRequestWithDefaults instantiates a new DeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceRequestWithDefaults() *DeviceRequest {
	this := DeviceRequest{}
	return &this
}

// GetExternalKey returns the ExternalKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetExternalKey() string {
	if o == nil || IsNil(o.ExternalKey.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalKey.Get()
}

// GetExternalKeyOk returns a tuple with the ExternalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetExternalKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalKey.Get(), o.ExternalKey.IsSet()
}

// HasExternalKey returns a boolean if a field has been set.
func (o *DeviceRequest) HasExternalKey() bool {
	if o != nil && o.ExternalKey.IsSet() {
		return true
	}

	return false
}

// SetExternalKey gets a reference to the given NullableString and assigns it to the ExternalKey field.
func (o *DeviceRequest) SetExternalKey(v string) {
	o.ExternalKey.Set(&v)
}
// SetExternalKeyNil sets the value for ExternalKey to be an explicit nil
func (o *DeviceRequest) SetExternalKeyNil() {
	o.ExternalKey.Set(nil)
}

// UnsetExternalKey ensures that no value is present for ExternalKey, not even an explicit nil
func (o *DeviceRequest) UnsetExternalKey() {
	o.ExternalKey.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceRequest) SetName(v string) {
	o.Name = &v
}

// GetPubKey returns the PubKey field value
func (o *DeviceRequest) GetPubKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetPubKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PubKey, true
}

// SetPubKey sets field value
func (o *DeviceRequest) SetPubKey(v string) {
	o.PubKey = v
}

// GetRawPassword returns the RawPassword field value if set, zero value otherwise.
func (o *DeviceRequest) GetRawPassword() string {
	if o == nil || IsNil(o.RawPassword) {
		var ret string
		return ret
	}
	return *o.RawPassword
}

// GetRawPasswordOk returns a tuple with the RawPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRequest) GetRawPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RawPassword) {
		return nil, false
	}
	return o.RawPassword, true
}

// HasRawPassword returns a boolean if a field has been set.
func (o *DeviceRequest) HasRawPassword() bool {
	if o != nil && !IsNil(o.RawPassword) {
		return true
	}

	return false
}

// SetRawPassword gets a reference to the given string and assigns it to the RawPassword field.
func (o *DeviceRequest) SetRawPassword(v string) {
	o.RawPassword = &v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *DeviceRequest) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *DeviceRequest) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *DeviceRequest) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *DeviceRequest) UnsetPassword() {
	o.Password.Unset()
}

// GetOs returns the Os field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetOs() string {
	if o == nil || IsNil(o.Os.Get()) {
		var ret string
		return ret
	}
	return *o.Os.Get()
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Os.Get(), o.Os.IsSet()
}

// HasOs returns a boolean if a field has been set.
func (o *DeviceRequest) HasOs() bool {
	if o != nil && o.Os.IsSet() {
		return true
	}

	return false
}

// SetOs gets a reference to the given NullableString and assigns it to the Os field.
func (o *DeviceRequest) SetOs(v string) {
	o.Os.Set(&v)
}
// SetOsNil sets the value for Os to be an explicit nil
func (o *DeviceRequest) SetOsNil() {
	o.Os.Set(nil)
}

// UnsetOs ensures that no value is present for Os, not even an explicit nil
func (o *DeviceRequest) UnsetOs() {
	o.Os.Unset()
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion.Get()) {
		var ret string
		return ret
	}
	return *o.OsVersion.Get()
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetOsVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsVersion.Get(), o.OsVersion.IsSet()
}

// HasOsVersion returns a boolean if a field has been set.
func (o *DeviceRequest) HasOsVersion() bool {
	if o != nil && o.OsVersion.IsSet() {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given NullableString and assigns it to the OsVersion field.
func (o *DeviceRequest) SetOsVersion(v string) {
	o.OsVersion.Set(&v)
}
// SetOsVersionNil sets the value for OsVersion to be an explicit nil
func (o *DeviceRequest) SetOsVersionNil() {
	o.OsVersion.Set(nil)
}

// UnsetOsVersion ensures that no value is present for OsVersion, not even an explicit nil
func (o *DeviceRequest) UnsetOsVersion() {
	o.OsVersion.Unset()
}

// GetOsArch returns the OsArch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetOsArch() string {
	if o == nil || IsNil(o.OsArch.Get()) {
		var ret string
		return ret
	}
	return *o.OsArch.Get()
}

// GetOsArchOk returns a tuple with the OsArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetOsArchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsArch.Get(), o.OsArch.IsSet()
}

// HasOsArch returns a boolean if a field has been set.
func (o *DeviceRequest) HasOsArch() bool {
	if o != nil && o.OsArch.IsSet() {
		return true
	}

	return false
}

// SetOsArch gets a reference to the given NullableString and assigns it to the OsArch field.
func (o *DeviceRequest) SetOsArch(v string) {
	o.OsArch.Set(&v)
}
// SetOsArchNil sets the value for OsArch to be an explicit nil
func (o *DeviceRequest) SetOsArchNil() {
	o.OsArch.Set(nil)
}

// UnsetOsArch ensures that no value is present for OsArch, not even an explicit nil
func (o *DeviceRequest) UnsetOsArch() {
	o.OsArch.Unset()
}

// GetDistro returns the Distro field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetDistro() string {
	if o == nil || IsNil(o.Distro.Get()) {
		var ret string
		return ret
	}
	return *o.Distro.Get()
}

// GetDistroOk returns a tuple with the Distro field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetDistroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Distro.Get(), o.Distro.IsSet()
}

// HasDistro returns a boolean if a field has been set.
func (o *DeviceRequest) HasDistro() bool {
	if o != nil && o.Distro.IsSet() {
		return true
	}

	return false
}

// SetDistro gets a reference to the given NullableString and assigns it to the Distro field.
func (o *DeviceRequest) SetDistro(v string) {
	o.Distro.Set(&v)
}
// SetDistroNil sets the value for Distro to be an explicit nil
func (o *DeviceRequest) SetDistroNil() {
	o.Distro.Set(nil)
}

// UnsetDistro ensures that no value is present for Distro, not even an explicit nil
func (o *DeviceRequest) UnsetDistro() {
	o.Distro.Unset()
}

// GetDistroVersion returns the DistroVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetDistroVersion() string {
	if o == nil || IsNil(o.DistroVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DistroVersion.Get()
}

// GetDistroVersionOk returns a tuple with the DistroVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetDistroVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistroVersion.Get(), o.DistroVersion.IsSet()
}

// HasDistroVersion returns a boolean if a field has been set.
func (o *DeviceRequest) HasDistroVersion() bool {
	if o != nil && o.DistroVersion.IsSet() {
		return true
	}

	return false
}

// SetDistroVersion gets a reference to the given NullableString and assigns it to the DistroVersion field.
func (o *DeviceRequest) SetDistroVersion(v string) {
	o.DistroVersion.Set(&v)
}
// SetDistroVersionNil sets the value for DistroVersion to be an explicit nil
func (o *DeviceRequest) SetDistroVersionNil() {
	o.DistroVersion.Set(nil)
}

// UnsetDistroVersion ensures that no value is present for DistroVersion, not even an explicit nil
func (o *DeviceRequest) UnsetDistroVersion() {
	o.DistroVersion.Unset()
}

// GetDistroCodename returns the DistroCodename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetDistroCodename() string {
	if o == nil || IsNil(o.DistroCodename.Get()) {
		var ret string
		return ret
	}
	return *o.DistroCodename.Get()
}

// GetDistroCodenameOk returns a tuple with the DistroCodename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetDistroCodenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistroCodename.Get(), o.DistroCodename.IsSet()
}

// HasDistroCodename returns a boolean if a field has been set.
func (o *DeviceRequest) HasDistroCodename() bool {
	if o != nil && o.DistroCodename.IsSet() {
		return true
	}

	return false
}

// SetDistroCodename gets a reference to the given NullableString and assigns it to the DistroCodename field.
func (o *DeviceRequest) SetDistroCodename(v string) {
	o.DistroCodename.Set(&v)
}
// SetDistroCodenameNil sets the value for DistroCodename to be an explicit nil
func (o *DeviceRequest) SetDistroCodenameNil() {
	o.DistroCodename.Set(nil)
}

// UnsetDistroCodename ensures that no value is present for DistroCodename, not even an explicit nil
func (o *DeviceRequest) UnsetDistroCodename() {
	o.DistroCodename.Unset()
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetAppVersion() string {
	if o == nil || IsNil(o.AppVersion.Get()) {
		var ret string
		return ret
	}
	return *o.AppVersion.Get()
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetAppVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppVersion.Get(), o.AppVersion.IsSet()
}

// HasAppVersion returns a boolean if a field has been set.
func (o *DeviceRequest) HasAppVersion() bool {
	if o != nil && o.AppVersion.IsSet() {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given NullableString and assigns it to the AppVersion field.
func (o *DeviceRequest) SetAppVersion(v string) {
	o.AppVersion.Set(&v)
}
// SetAppVersionNil sets the value for AppVersion to be an explicit nil
func (o *DeviceRequest) SetAppVersionNil() {
	o.AppVersion.Set(nil)
}

// UnsetAppVersion ensures that no value is present for AppVersion, not even an explicit nil
func (o *DeviceRequest) UnsetAppVersion() {
	o.AppVersion.Unset()
}

// GetAppBuild returns the AppBuild field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceRequest) GetAppBuild() string {
	if o == nil || IsNil(o.AppBuild.Get()) {
		var ret string
		return ret
	}
	return *o.AppBuild.Get()
}

// GetAppBuildOk returns a tuple with the AppBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceRequest) GetAppBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppBuild.Get(), o.AppBuild.IsSet()
}

// HasAppBuild returns a boolean if a field has been set.
func (o *DeviceRequest) HasAppBuild() bool {
	if o != nil && o.AppBuild.IsSet() {
		return true
	}

	return false
}

// SetAppBuild gets a reference to the given NullableString and assigns it to the AppBuild field.
func (o *DeviceRequest) SetAppBuild(v string) {
	o.AppBuild.Set(&v)
}
// SetAppBuildNil sets the value for AppBuild to be an explicit nil
func (o *DeviceRequest) SetAppBuildNil() {
	o.AppBuild.Set(nil)
}

// UnsetAppBuild ensures that no value is present for AppBuild, not even an explicit nil
func (o *DeviceRequest) UnsetAppBuild() {
	o.AppBuild.Unset()
}

func (o DeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExternalKey.IsSet() {
		toSerialize["external_key"] = o.ExternalKey.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["pub_key"] = o.PubKey
	if !IsNil(o.RawPassword) {
		toSerialize["raw_password"] = o.RawPassword
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Os.IsSet() {
		toSerialize["os"] = o.Os.Get()
	}
	if o.OsVersion.IsSet() {
		toSerialize["os_version"] = o.OsVersion.Get()
	}
	if o.OsArch.IsSet() {
		toSerialize["os_arch"] = o.OsArch.Get()
	}
	if o.Distro.IsSet() {
		toSerialize["distro"] = o.Distro.Get()
	}
	if o.DistroVersion.IsSet() {
		toSerialize["distro_version"] = o.DistroVersion.Get()
	}
	if o.DistroCodename.IsSet() {
		toSerialize["distro_codename"] = o.DistroCodename.Get()
	}
	if o.AppVersion.IsSet() {
		toSerialize["app_version"] = o.AppVersion.Get()
	}
	if o.AppBuild.IsSet() {
		toSerialize["app_build"] = o.AppBuild.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pub_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceRequest := _DeviceRequest{}

	err = json.Unmarshal(data, &varDeviceRequest)

	if err != nil {
		return err
	}

	*o = DeviceRequest(varDeviceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "external_key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "pub_key")
		delete(additionalProperties, "raw_password")
		delete(additionalProperties, "password")
		delete(additionalProperties, "os")
		delete(additionalProperties, "os_version")
		delete(additionalProperties, "os_arch")
		delete(additionalProperties, "distro")
		delete(additionalProperties, "distro_version")
		delete(additionalProperties, "distro_codename")
		delete(additionalProperties, "app_version")
		delete(additionalProperties, "app_build")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceRequest struct {
	value *DeviceRequest
	isSet bool
}

func (v NullableDeviceRequest) Get() *DeviceRequest {
	return v.value
}

func (v *NullableDeviceRequest) Set(val *DeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceRequest(val *DeviceRequest) *NullableDeviceRequest {
	return &NullableDeviceRequest{value: val, isSet: true}
}

func (v NullableDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


