/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
)

// checks if the BillingOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingOptions{}

// BillingOptions struct for BillingOptions
type BillingOptions struct {
	AvailableCurrencies []Currency `json:"available_currencies,omitempty"`
	DefaultCurrency *Currency `json:"default_currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BillingOptions BillingOptions

// NewBillingOptions instantiates a new BillingOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingOptions() *BillingOptions {
	this := BillingOptions{}
	return &this
}

// NewBillingOptionsWithDefaults instantiates a new BillingOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingOptionsWithDefaults() *BillingOptions {
	this := BillingOptions{}
	return &this
}

// GetAvailableCurrencies returns the AvailableCurrencies field value if set, zero value otherwise.
func (o *BillingOptions) GetAvailableCurrencies() []Currency {
	if o == nil || IsNil(o.AvailableCurrencies) {
		var ret []Currency
		return ret
	}
	return o.AvailableCurrencies
}

// GetAvailableCurrenciesOk returns a tuple with the AvailableCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingOptions) GetAvailableCurrenciesOk() ([]Currency, bool) {
	if o == nil || IsNil(o.AvailableCurrencies) {
		return nil, false
	}
	return o.AvailableCurrencies, true
}

// HasAvailableCurrencies returns a boolean if a field has been set.
func (o *BillingOptions) HasAvailableCurrencies() bool {
	if o != nil && !IsNil(o.AvailableCurrencies) {
		return true
	}

	return false
}

// SetAvailableCurrencies gets a reference to the given []Currency and assigns it to the AvailableCurrencies field.
func (o *BillingOptions) SetAvailableCurrencies(v []Currency) {
	o.AvailableCurrencies = v
}

// GetDefaultCurrency returns the DefaultCurrency field value if set, zero value otherwise.
func (o *BillingOptions) GetDefaultCurrency() Currency {
	if o == nil || IsNil(o.DefaultCurrency) {
		var ret Currency
		return ret
	}
	return *o.DefaultCurrency
}

// GetDefaultCurrencyOk returns a tuple with the DefaultCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingOptions) GetDefaultCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.DefaultCurrency) {
		return nil, false
	}
	return o.DefaultCurrency, true
}

// HasDefaultCurrency returns a boolean if a field has been set.
func (o *BillingOptions) HasDefaultCurrency() bool {
	if o != nil && !IsNil(o.DefaultCurrency) {
		return true
	}

	return false
}

// SetDefaultCurrency gets a reference to the given Currency and assigns it to the DefaultCurrency field.
func (o *BillingOptions) SetDefaultCurrency(v Currency) {
	o.DefaultCurrency = &v
}

func (o BillingOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableCurrencies) {
		toSerialize["available_currencies"] = o.AvailableCurrencies
	}
	if !IsNil(o.DefaultCurrency) {
		toSerialize["default_currency"] = o.DefaultCurrency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BillingOptions) UnmarshalJSON(data []byte) (err error) {
	varBillingOptions := _BillingOptions{}

	err = json.Unmarshal(data, &varBillingOptions)

	if err != nil {
		return err
	}

	*o = BillingOptions(varBillingOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "available_currencies")
		delete(additionalProperties, "default_currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBillingOptions struct {
	value *BillingOptions
	isSet bool
}

func (v NullableBillingOptions) Get() *BillingOptions {
	return v.value
}

func (v *NullableBillingOptions) Set(val *BillingOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingOptions(val *BillingOptions) *NullableBillingOptions {
	return &NullableBillingOptions{value: val, isSet: true}
}

func (v NullableBillingOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


