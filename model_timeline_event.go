/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TimelineEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimelineEvent{}

// TimelineEvent Serializer for billing timeline events.
type TimelineEvent struct {
	Date time.Time `json:"date"`
	EventType TimelineEventType `json:"event_type"`
	Description string `json:"description"`
	Amount NullableFloat64 `json:"amount"`
	Currency NullableString `json:"currency"`
}

type _TimelineEvent TimelineEvent

// NewTimelineEvent instantiates a new TimelineEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineEvent(date time.Time, eventType TimelineEventType, description string, amount NullableFloat64, currency NullableString) *TimelineEvent {
	this := TimelineEvent{}
	this.Date = date
	this.EventType = eventType
	this.Description = description
	this.Amount = amount
	this.Currency = currency
	return &this
}

// NewTimelineEventWithDefaults instantiates a new TimelineEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineEventWithDefaults() *TimelineEvent {
	this := TimelineEvent{}
	return &this
}

// GetDate returns the Date field value
func (o *TimelineEvent) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *TimelineEvent) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *TimelineEvent) SetDate(v time.Time) {
	o.Date = v
}

// GetEventType returns the EventType field value
func (o *TimelineEvent) GetEventType() TimelineEventType {
	if o == nil {
		var ret TimelineEventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *TimelineEvent) GetEventTypeOk() (*TimelineEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *TimelineEvent) SetEventType(v TimelineEventType) {
	o.EventType = v
}

// GetDescription returns the Description field value
func (o *TimelineEvent) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TimelineEvent) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TimelineEvent) SetDescription(v string) {
	o.Description = v
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *TimelineEvent) GetAmount() float64 {
	if o == nil || o.Amount.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimelineEvent) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// SetAmount sets field value
func (o *TimelineEvent) SetAmount(v float64) {
	o.Amount.Set(&v)
}

// GetCurrency returns the Currency field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TimelineEvent) GetCurrency() string {
	if o == nil || o.Currency.Get() == nil {
		var ret string
		return ret
	}

	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimelineEvent) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// SetCurrency sets field value
func (o *TimelineEvent) SetCurrency(v string) {
	o.Currency.Set(&v)
}

func (o TimelineEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimelineEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["event_type"] = o.EventType
	toSerialize["description"] = o.Description
	toSerialize["amount"] = o.Amount.Get()
	toSerialize["currency"] = o.Currency.Get()
	return toSerialize, nil
}

func (o *TimelineEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"event_type",
		"description",
		"amount",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimelineEvent := _TimelineEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimelineEvent)

	if err != nil {
		return err
	}

	*o = TimelineEvent(varTimelineEvent)

	return err
}

type NullableTimelineEvent struct {
	value *TimelineEvent
	isSet bool
}

func (v NullableTimelineEvent) Get() *TimelineEvent {
	return v.value
}

func (v *NullableTimelineEvent) Set(val *TimelineEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineEvent(val *TimelineEvent) *NullableTimelineEvent {
	return &NullableTimelineEvent{value: val, isSet: true}
}

func (v NullableTimelineEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


