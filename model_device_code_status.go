/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// DeviceCodeStatus * `waiting` - Waiting * `approved` - Approved * `expired` - Expired
type DeviceCodeStatus string

// List of DeviceCodeStatus
const (
	DEVICECODESTATUS_WAITING DeviceCodeStatus = "waiting"
	DEVICECODESTATUS_APPROVED DeviceCodeStatus = "approved"
	DEVICECODESTATUS_EXPIRED DeviceCodeStatus = "expired"
)

// All allowed values of DeviceCodeStatus enum
var AllowedDeviceCodeStatusEnumValues = []DeviceCodeStatus{
	"waiting",
	"approved",
	"expired",
}

func (v *DeviceCodeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceCodeStatus(value)
	for _, existing := range AllowedDeviceCodeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceCodeStatus", value)
}

// NewDeviceCodeStatusFromValue returns a pointer to a valid DeviceCodeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceCodeStatusFromValue(v string) (*DeviceCodeStatus, error) {
	ev := DeviceCodeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceCodeStatus: valid values are %v", v, AllowedDeviceCodeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceCodeStatus) IsValid() bool {
	for _, existing := range AllowedDeviceCodeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceCodeStatus value
func (v DeviceCodeStatus) Ptr() *DeviceCodeStatus {
	return &v
}

type NullableDeviceCodeStatus struct {
	value *DeviceCodeStatus
	isSet bool
}

func (v NullableDeviceCodeStatus) Get() *DeviceCodeStatus {
	return v.value
}

func (v *NullableDeviceCodeStatus) Set(val *DeviceCodeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCodeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCodeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCodeStatus(val *DeviceCodeStatus) *NullableDeviceCodeStatus {
	return &NullableDeviceCodeStatus{value: val, isSet: true}
}

func (v NullableDeviceCodeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCodeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

