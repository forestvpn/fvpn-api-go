/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Invoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invoice{}

// Invoice struct for Invoice
type Invoice struct {
	Id string `json:"id"`
	Number string `json:"number"`
	Subscription NullableString `json:"subscription,omitempty"`
	Status *InvoiceStatus `json:"status,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Currency string `json:"currency"`
	IssuedAt time.Time `json:"issued_at"`
	EffectiveAt time.Time `json:"effective_at"`
	DueAt time.Time `json:"due_at"`
	Pdf NullableString `json:"pdf,omitempty"`
	Lines []InvoiceLine `json:"lines"`
	Total InvoiceTotalDetails `json:"total"`
}

type _Invoice Invoice

// NewInvoice instantiates a new Invoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoice(id string, number string, currency string, issuedAt time.Time, effectiveAt time.Time, dueAt time.Time, lines []InvoiceLine, total InvoiceTotalDetails) *Invoice {
	this := Invoice{}
	this.Id = id
	this.Number = number
	this.Currency = currency
	this.IssuedAt = issuedAt
	this.EffectiveAt = effectiveAt
	this.DueAt = dueAt
	this.Lines = lines
	this.Total = total
	return &this
}

// NewInvoiceWithDefaults instantiates a new Invoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceWithDefaults() *Invoice {
	this := Invoice{}
	return &this
}

// GetId returns the Id field value
func (o *Invoice) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Invoice) SetId(v string) {
	o.Id = v
}

// GetNumber returns the Number field value
func (o *Invoice) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Invoice) SetNumber(v string) {
	o.Number = v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetSubscription() string {
	if o == nil || IsNil(o.Subscription.Get()) {
		var ret string
		return ret
	}
	return *o.Subscription.Get()
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetSubscriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subscription.Get(), o.Subscription.IsSet()
}

// HasSubscription returns a boolean if a field has been set.
func (o *Invoice) HasSubscription() bool {
	if o != nil && o.Subscription.IsSet() {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given NullableString and assigns it to the Subscription field.
func (o *Invoice) SetSubscription(v string) {
	o.Subscription.Set(&v)
}
// SetSubscriptionNil sets the value for Subscription to be an explicit nil
func (o *Invoice) SetSubscriptionNil() {
	o.Subscription.Set(nil)
}

// UnsetSubscription ensures that no value is present for Subscription, not even an explicit nil
func (o *Invoice) UnsetSubscription() {
	o.Subscription.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Invoice) GetStatus() InvoiceStatus {
	if o == nil || IsNil(o.Status) {
		var ret InvoiceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStatusOk() (*InvoiceStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Invoice) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given InvoiceStatus and assigns it to the Status field.
func (o *Invoice) SetStatus(v InvoiceStatus) {
	o.Status = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Invoice) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Invoice) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Invoice) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Invoice) UnsetDescription() {
	o.Description.Unset()
}

// GetCurrency returns the Currency field value
func (o *Invoice) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Invoice) SetCurrency(v string) {
	o.Currency = v
}

// GetIssuedAt returns the IssuedAt field value
func (o *Invoice) GetIssuedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedAt, true
}

// SetIssuedAt sets field value
func (o *Invoice) SetIssuedAt(v time.Time) {
	o.IssuedAt = v
}

// GetEffectiveAt returns the EffectiveAt field value
func (o *Invoice) GetEffectiveAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EffectiveAt
}

// GetEffectiveAtOk returns a tuple with the EffectiveAt field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetEffectiveAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveAt, true
}

// SetEffectiveAt sets field value
func (o *Invoice) SetEffectiveAt(v time.Time) {
	o.EffectiveAt = v
}

// GetDueAt returns the DueAt field value
func (o *Invoice) GetDueAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DueAt
}

// GetDueAtOk returns a tuple with the DueAt field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetDueAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DueAt, true
}

// SetDueAt sets field value
func (o *Invoice) SetDueAt(v time.Time) {
	o.DueAt = v
}

// GetPdf returns the Pdf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetPdf() string {
	if o == nil || IsNil(o.Pdf.Get()) {
		var ret string
		return ret
	}
	return *o.Pdf.Get()
}

// GetPdfOk returns a tuple with the Pdf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetPdfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pdf.Get(), o.Pdf.IsSet()
}

// HasPdf returns a boolean if a field has been set.
func (o *Invoice) HasPdf() bool {
	if o != nil && o.Pdf.IsSet() {
		return true
	}

	return false
}

// SetPdf gets a reference to the given NullableString and assigns it to the Pdf field.
func (o *Invoice) SetPdf(v string) {
	o.Pdf.Set(&v)
}
// SetPdfNil sets the value for Pdf to be an explicit nil
func (o *Invoice) SetPdfNil() {
	o.Pdf.Set(nil)
}

// UnsetPdf ensures that no value is present for Pdf, not even an explicit nil
func (o *Invoice) UnsetPdf() {
	o.Pdf.Unset()
}

// GetLines returns the Lines field value
func (o *Invoice) GetLines() []InvoiceLine {
	if o == nil {
		var ret []InvoiceLine
		return ret
	}

	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetLinesOk() ([]InvoiceLine, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lines, true
}

// SetLines sets field value
func (o *Invoice) SetLines(v []InvoiceLine) {
	o.Lines = v
}

// GetTotal returns the Total field value
func (o *Invoice) GetTotal() InvoiceTotalDetails {
	if o == nil {
		var ret InvoiceTotalDetails
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetTotalOk() (*InvoiceTotalDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Invoice) SetTotal(v InvoiceTotalDetails) {
	o.Total = v
}

func (o Invoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["number"] = o.Number
	if o.Subscription.IsSet() {
		toSerialize["subscription"] = o.Subscription.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["currency"] = o.Currency
	toSerialize["issued_at"] = o.IssuedAt
	toSerialize["effective_at"] = o.EffectiveAt
	toSerialize["due_at"] = o.DueAt
	if o.Pdf.IsSet() {
		toSerialize["pdf"] = o.Pdf.Get()
	}
	toSerialize["lines"] = o.Lines
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *Invoice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"number",
		"currency",
		"issued_at",
		"effective_at",
		"due_at",
		"lines",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoice := _Invoice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvoice)

	if err != nil {
		return err
	}

	*o = Invoice(varInvoice)

	return err
}

type NullableInvoice struct {
	value *Invoice
	isSet bool
}

func (v NullableInvoice) Get() *Invoice {
	return v.value
}

func (v *NullableInvoice) Set(val *Invoice) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoice) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoice(val *Invoice) *NullableInvoice {
	return &NullableInvoice{value: val, isSet: true}
}

func (v NullableInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


