/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LocationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationRequest{}

// LocationRequest struct for LocationRequest
type LocationRequest struct {
	Id string `json:"id"`
	Country CountryRequest `json:"country"`
	Region LocationRegionRequest `json:"region"`
	Name string `json:"name"`
	NameAscii NullableString `json:"name_ascii,omitempty"`
	Lat NullableFloat64 `json:"lat,omitempty"`
	Lon NullableFloat64 `json:"lon,omitempty"`
}

type _LocationRequest LocationRequest

// NewLocationRequest instantiates a new LocationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationRequest(id string, country CountryRequest, region LocationRegionRequest, name string) *LocationRequest {
	this := LocationRequest{}
	this.Id = id
	this.Country = country
	this.Region = region
	this.Name = name
	return &this
}

// NewLocationRequestWithDefaults instantiates a new LocationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationRequestWithDefaults() *LocationRequest {
	this := LocationRequest{}
	return &this
}

// GetId returns the Id field value
func (o *LocationRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LocationRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LocationRequest) SetId(v string) {
	o.Id = v
}

// GetCountry returns the Country field value
func (o *LocationRequest) GetCountry() CountryRequest {
	if o == nil {
		var ret CountryRequest
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *LocationRequest) GetCountryOk() (*CountryRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *LocationRequest) SetCountry(v CountryRequest) {
	o.Country = v
}

// GetRegion returns the Region field value
func (o *LocationRequest) GetRegion() LocationRegionRequest {
	if o == nil {
		var ret LocationRegionRequest
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *LocationRequest) GetRegionOk() (*LocationRegionRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *LocationRequest) SetRegion(v LocationRegionRequest) {
	o.Region = v
}

// GetName returns the Name field value
func (o *LocationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LocationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LocationRequest) SetName(v string) {
	o.Name = v
}

// GetNameAscii returns the NameAscii field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationRequest) GetNameAscii() string {
	if o == nil || IsNil(o.NameAscii.Get()) {
		var ret string
		return ret
	}
	return *o.NameAscii.Get()
}

// GetNameAsciiOk returns a tuple with the NameAscii field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationRequest) GetNameAsciiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameAscii.Get(), o.NameAscii.IsSet()
}

// HasNameAscii returns a boolean if a field has been set.
func (o *LocationRequest) HasNameAscii() bool {
	if o != nil && o.NameAscii.IsSet() {
		return true
	}

	return false
}

// SetNameAscii gets a reference to the given NullableString and assigns it to the NameAscii field.
func (o *LocationRequest) SetNameAscii(v string) {
	o.NameAscii.Set(&v)
}
// SetNameAsciiNil sets the value for NameAscii to be an explicit nil
func (o *LocationRequest) SetNameAsciiNil() {
	o.NameAscii.Set(nil)
}

// UnsetNameAscii ensures that no value is present for NameAscii, not even an explicit nil
func (o *LocationRequest) UnsetNameAscii() {
	o.NameAscii.Unset()
}

// GetLat returns the Lat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationRequest) GetLat() float64 {
	if o == nil || IsNil(o.Lat.Get()) {
		var ret float64
		return ret
	}
	return *o.Lat.Get()
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationRequest) GetLatOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lat.Get(), o.Lat.IsSet()
}

// HasLat returns a boolean if a field has been set.
func (o *LocationRequest) HasLat() bool {
	if o != nil && o.Lat.IsSet() {
		return true
	}

	return false
}

// SetLat gets a reference to the given NullableFloat64 and assigns it to the Lat field.
func (o *LocationRequest) SetLat(v float64) {
	o.Lat.Set(&v)
}
// SetLatNil sets the value for Lat to be an explicit nil
func (o *LocationRequest) SetLatNil() {
	o.Lat.Set(nil)
}

// UnsetLat ensures that no value is present for Lat, not even an explicit nil
func (o *LocationRequest) UnsetLat() {
	o.Lat.Unset()
}

// GetLon returns the Lon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationRequest) GetLon() float64 {
	if o == nil || IsNil(o.Lon.Get()) {
		var ret float64
		return ret
	}
	return *o.Lon.Get()
}

// GetLonOk returns a tuple with the Lon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationRequest) GetLonOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lon.Get(), o.Lon.IsSet()
}

// HasLon returns a boolean if a field has been set.
func (o *LocationRequest) HasLon() bool {
	if o != nil && o.Lon.IsSet() {
		return true
	}

	return false
}

// SetLon gets a reference to the given NullableFloat64 and assigns it to the Lon field.
func (o *LocationRequest) SetLon(v float64) {
	o.Lon.Set(&v)
}
// SetLonNil sets the value for Lon to be an explicit nil
func (o *LocationRequest) SetLonNil() {
	o.Lon.Set(nil)
}

// UnsetLon ensures that no value is present for Lon, not even an explicit nil
func (o *LocationRequest) UnsetLon() {
	o.Lon.Unset()
}

func (o LocationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["country"] = o.Country
	toSerialize["region"] = o.Region
	toSerialize["name"] = o.Name
	if o.NameAscii.IsSet() {
		toSerialize["name_ascii"] = o.NameAscii.Get()
	}
	if o.Lat.IsSet() {
		toSerialize["lat"] = o.Lat.Get()
	}
	if o.Lon.IsSet() {
		toSerialize["lon"] = o.Lon.Get()
	}
	return toSerialize, nil
}

func (o *LocationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"country",
		"region",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocationRequest := _LocationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocationRequest)

	if err != nil {
		return err
	}

	*o = LocationRequest(varLocationRequest)

	return err
}

type NullableLocationRequest struct {
	value *LocationRequest
	isSet bool
}

func (v NullableLocationRequest) Get() *LocationRequest {
	return v.value
}

func (v *NullableLocationRequest) Set(val *LocationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationRequest(val *LocationRequest) *NullableLocationRequest {
	return &NullableLocationRequest{value: val, isSet: true}
}

func (v NullableLocationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


