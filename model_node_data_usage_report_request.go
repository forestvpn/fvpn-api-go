/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the NodeDataUsageReportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeDataUsageReportRequest{}

// NodeDataUsageReportRequest struct for NodeDataUsageReportRequest
type NodeDataUsageReportRequest struct {
	Timestamp time.Time `json:"timestamp"`
	Items []NodeDataUsageItemRequest `json:"items"`
	AdditionalProperties map[string]interface{}
}

type _NodeDataUsageReportRequest NodeDataUsageReportRequest

// NewNodeDataUsageReportRequest instantiates a new NodeDataUsageReportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeDataUsageReportRequest(timestamp time.Time, items []NodeDataUsageItemRequest) *NodeDataUsageReportRequest {
	this := NodeDataUsageReportRequest{}
	this.Timestamp = timestamp
	this.Items = items
	return &this
}

// NewNodeDataUsageReportRequestWithDefaults instantiates a new NodeDataUsageReportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeDataUsageReportRequestWithDefaults() *NodeDataUsageReportRequest {
	this := NodeDataUsageReportRequest{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *NodeDataUsageReportRequest) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *NodeDataUsageReportRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *NodeDataUsageReportRequest) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetItems returns the Items field value
func (o *NodeDataUsageReportRequest) GetItems() []NodeDataUsageItemRequest {
	if o == nil {
		var ret []NodeDataUsageItemRequest
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *NodeDataUsageReportRequest) GetItemsOk() ([]NodeDataUsageItemRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *NodeDataUsageReportRequest) SetItems(v []NodeDataUsageItemRequest) {
	o.Items = v
}

func (o NodeDataUsageReportRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeDataUsageReportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["items"] = o.Items

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NodeDataUsageReportRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeDataUsageReportRequest := _NodeDataUsageReportRequest{}

	err = json.Unmarshal(data, &varNodeDataUsageReportRequest)

	if err != nil {
		return err
	}

	*o = NodeDataUsageReportRequest(varNodeDataUsageReportRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNodeDataUsageReportRequest struct {
	value *NodeDataUsageReportRequest
	isSet bool
}

func (v NullableNodeDataUsageReportRequest) Get() *NodeDataUsageReportRequest {
	return v.value
}

func (v *NullableNodeDataUsageReportRequest) Set(val *NodeDataUsageReportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeDataUsageReportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeDataUsageReportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeDataUsageReportRequest(val *NodeDataUsageReportRequest) *NullableNodeDataUsageReportRequest {
	return &NullableNodeDataUsageReportRequest{value: val, isSet: true}
}

func (v NullableNodeDataUsageReportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeDataUsageReportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


