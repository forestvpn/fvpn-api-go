/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// TimelineEventType * `subscription_start` - Subscription Start * `trial_start` - Trial Start * `trial_end` - Trial End * `first_charge` - First Charge * `proration` - Proration * `renewal` - Renewal
type TimelineEventType string

// List of TimelineEventType
const (
	TIMELINEEVENTTYPE_SUBSCRIPTION_START TimelineEventType = "subscription_start"
	TIMELINEEVENTTYPE_TRIAL_START TimelineEventType = "trial_start"
	TIMELINEEVENTTYPE_TRIAL_END TimelineEventType = "trial_end"
	TIMELINEEVENTTYPE_FIRST_CHARGE TimelineEventType = "first_charge"
	TIMELINEEVENTTYPE_PRORATION TimelineEventType = "proration"
	TIMELINEEVENTTYPE_RENEWAL TimelineEventType = "renewal"
)

// All allowed values of TimelineEventType enum
var AllowedTimelineEventTypeEnumValues = []TimelineEventType{
	"subscription_start",
	"trial_start",
	"trial_end",
	"first_charge",
	"proration",
	"renewal",
}

func (v *TimelineEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimelineEventType(value)
	for _, existing := range AllowedTimelineEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimelineEventType", value)
}

// NewTimelineEventTypeFromValue returns a pointer to a valid TimelineEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimelineEventTypeFromValue(v string) (*TimelineEventType, error) {
	ev := TimelineEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimelineEventType: valid values are %v", v, AllowedTimelineEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimelineEventType) IsValid() bool {
	for _, existing := range AllowedTimelineEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimelineEventType value
func (v TimelineEventType) Ptr() *TimelineEventType {
	return &v
}

type NullableTimelineEventType struct {
	value *TimelineEventType
	isSet bool
}

func (v NullableTimelineEventType) Get() *TimelineEventType {
	return v.value
}

func (v *NullableTimelineEventType) Set(val *TimelineEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineEventType(val *TimelineEventType) *NullableTimelineEventType {
	return &NullableTimelineEventType{value: val, isSet: true}
}

func (v NullableTimelineEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

