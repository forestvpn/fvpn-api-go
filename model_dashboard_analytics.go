/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the DashboardAnalytics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardAnalytics{}

// DashboardAnalytics Complete dashboard analytics data.
type DashboardAnalytics struct {
	Summary7d ComparisonData `json:"summary_7d"`
	Summary30d ComparisonData `json:"summary_30d"`
	TopDevices TopDevices `json:"top_devices"`
	AdditionalProperties map[string]interface{}
}

type _DashboardAnalytics DashboardAnalytics

// NewDashboardAnalytics instantiates a new DashboardAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardAnalytics(summary7d ComparisonData, summary30d ComparisonData, topDevices TopDevices) *DashboardAnalytics {
	this := DashboardAnalytics{}
	this.Summary7d = summary7d
	this.Summary30d = summary30d
	this.TopDevices = topDevices
	return &this
}

// NewDashboardAnalyticsWithDefaults instantiates a new DashboardAnalytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardAnalyticsWithDefaults() *DashboardAnalytics {
	this := DashboardAnalytics{}
	return &this
}

// GetSummary7d returns the Summary7d field value
func (o *DashboardAnalytics) GetSummary7d() ComparisonData {
	if o == nil {
		var ret ComparisonData
		return ret
	}

	return o.Summary7d
}

// GetSummary7dOk returns a tuple with the Summary7d field value
// and a boolean to check if the value has been set.
func (o *DashboardAnalytics) GetSummary7dOk() (*ComparisonData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary7d, true
}

// SetSummary7d sets field value
func (o *DashboardAnalytics) SetSummary7d(v ComparisonData) {
	o.Summary7d = v
}

// GetSummary30d returns the Summary30d field value
func (o *DashboardAnalytics) GetSummary30d() ComparisonData {
	if o == nil {
		var ret ComparisonData
		return ret
	}

	return o.Summary30d
}

// GetSummary30dOk returns a tuple with the Summary30d field value
// and a boolean to check if the value has been set.
func (o *DashboardAnalytics) GetSummary30dOk() (*ComparisonData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary30d, true
}

// SetSummary30d sets field value
func (o *DashboardAnalytics) SetSummary30d(v ComparisonData) {
	o.Summary30d = v
}

// GetTopDevices returns the TopDevices field value
func (o *DashboardAnalytics) GetTopDevices() TopDevices {
	if o == nil {
		var ret TopDevices
		return ret
	}

	return o.TopDevices
}

// GetTopDevicesOk returns a tuple with the TopDevices field value
// and a boolean to check if the value has been set.
func (o *DashboardAnalytics) GetTopDevicesOk() (*TopDevices, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopDevices, true
}

// SetTopDevices sets field value
func (o *DashboardAnalytics) SetTopDevices(v TopDevices) {
	o.TopDevices = v
}

func (o DashboardAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardAnalytics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["summary_7d"] = o.Summary7d
	toSerialize["summary_30d"] = o.Summary30d
	toSerialize["top_devices"] = o.TopDevices

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DashboardAnalytics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"summary_7d",
		"summary_30d",
		"top_devices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboardAnalytics := _DashboardAnalytics{}

	err = json.Unmarshal(data, &varDashboardAnalytics)

	if err != nil {
		return err
	}

	*o = DashboardAnalytics(varDashboardAnalytics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "summary_7d")
		delete(additionalProperties, "summary_30d")
		delete(additionalProperties, "top_devices")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDashboardAnalytics struct {
	value *DashboardAnalytics
	isSet bool
}

func (v NullableDashboardAnalytics) Get() *DashboardAnalytics {
	return v.value
}

func (v *NullableDashboardAnalytics) Set(val *DashboardAnalytics) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardAnalytics(val *DashboardAnalytics) *NullableDashboardAnalytics {
	return &NullableDashboardAnalytics{value: val, isSet: true}
}

func (v NullableDashboardAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


