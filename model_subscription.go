/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Subscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscription{}

// Subscription struct for Subscription
type Subscription struct {
	Id string `json:"id"`
	// Date when the subscription was first created.The date might differ from the created date due to backdating.
	StartDate time.Time `json:"start_date"`
	// If the subscription has ended, the date the subscription ended.
	EndedAt NullableTime `json:"ended_at,omitempty"`
	// Start of the current period that the subscription has been invoiced for.
	CurrentPeriodStart time.Time `json:"current_period_start"`
	// End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
	CurrentPeriodEnd time.Time `json:"current_period_end"`
	// If the subscription has a trial, the beginning of that trial.
	TrialStart NullableTime `json:"trial_start,omitempty"`
	// If the subscription has a trial, the end of that trial.
	TrialEnd NullableTime `json:"trial_end,omitempty"`
	// A date in the future at which the subscription will automatically get canceled.
	CancelAt NullableTime `json:"cancel_at,omitempty"`
	// If the subscription has been canceled, the date of that cancellation.
	CanceledAt NullableTime `json:"canceled_at,omitempty"`
	Status *SubscriptionStatus `json:"status,omitempty"`
	// The subscription's description, meant to be displayable to the customer.Use this field to optionally store an explanation of the subscription.
	Description NullableString `json:"description,omitempty"`
	ManagedBy NullableManagedBy `json:"managed_by"`
	Amount float64 `json:"amount"`
	Currency string `json:"currency"`
	LatestInvoice NullableInvoice `json:"latest_invoice"`
	PendingUpdate NullableSubscriptionPendingUpdate `json:"pending_update"`
	Plan Plan `json:"plan"`
	PlanPrice PlanPrice `json:"plan_price"`
	CreatedAt time.Time `json:"created_at"`
}

type _Subscription Subscription

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription(id string, startDate time.Time, currentPeriodStart time.Time, currentPeriodEnd time.Time, managedBy NullableManagedBy, amount float64, currency string, latestInvoice NullableInvoice, pendingUpdate NullableSubscriptionPendingUpdate, plan Plan, planPrice PlanPrice, createdAt time.Time) *Subscription {
	this := Subscription{}
	this.Id = id
	this.StartDate = startDate
	this.CurrentPeriodStart = currentPeriodStart
	this.CurrentPeriodEnd = currentPeriodEnd
	this.ManagedBy = managedBy
	this.Amount = amount
	this.Currency = currency
	this.LatestInvoice = latestInvoice
	this.PendingUpdate = pendingUpdate
	this.Plan = plan
	this.PlanPrice = planPrice
	this.CreatedAt = createdAt
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	return &this
}

// GetId returns the Id field value
func (o *Subscription) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Subscription) SetId(v string) {
	o.Id = v
}

// GetStartDate returns the StartDate field value
func (o *Subscription) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *Subscription) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscription) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt.Get()
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndedAt.Get(), o.EndedAt.IsSet()
}

// HasEndedAt returns a boolean if a field has been set.
func (o *Subscription) HasEndedAt() bool {
	if o != nil && o.EndedAt.IsSet() {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given NullableTime and assigns it to the EndedAt field.
func (o *Subscription) SetEndedAt(v time.Time) {
	o.EndedAt.Set(&v)
}
// SetEndedAtNil sets the value for EndedAt to be an explicit nil
func (o *Subscription) SetEndedAtNil() {
	o.EndedAt.Set(nil)
}

// UnsetEndedAt ensures that no value is present for EndedAt, not even an explicit nil
func (o *Subscription) UnsetEndedAt() {
	o.EndedAt.Unset()
}

// GetCurrentPeriodStart returns the CurrentPeriodStart field value
func (o *Subscription) GetCurrentPeriodStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CurrentPeriodStart
}

// GetCurrentPeriodStartOk returns a tuple with the CurrentPeriodStart field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetCurrentPeriodStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentPeriodStart, true
}

// SetCurrentPeriodStart sets field value
func (o *Subscription) SetCurrentPeriodStart(v time.Time) {
	o.CurrentPeriodStart = v
}

// GetCurrentPeriodEnd returns the CurrentPeriodEnd field value
func (o *Subscription) GetCurrentPeriodEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CurrentPeriodEnd
}

// GetCurrentPeriodEndOk returns a tuple with the CurrentPeriodEnd field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetCurrentPeriodEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentPeriodEnd, true
}

// SetCurrentPeriodEnd sets field value
func (o *Subscription) SetCurrentPeriodEnd(v time.Time) {
	o.CurrentPeriodEnd = v
}

// GetTrialStart returns the TrialStart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscription) GetTrialStart() time.Time {
	if o == nil || IsNil(o.TrialStart.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TrialStart.Get()
}

// GetTrialStartOk returns a tuple with the TrialStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetTrialStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrialStart.Get(), o.TrialStart.IsSet()
}

// HasTrialStart returns a boolean if a field has been set.
func (o *Subscription) HasTrialStart() bool {
	if o != nil && o.TrialStart.IsSet() {
		return true
	}

	return false
}

// SetTrialStart gets a reference to the given NullableTime and assigns it to the TrialStart field.
func (o *Subscription) SetTrialStart(v time.Time) {
	o.TrialStart.Set(&v)
}
// SetTrialStartNil sets the value for TrialStart to be an explicit nil
func (o *Subscription) SetTrialStartNil() {
	o.TrialStart.Set(nil)
}

// UnsetTrialStart ensures that no value is present for TrialStart, not even an explicit nil
func (o *Subscription) UnsetTrialStart() {
	o.TrialStart.Unset()
}

// GetTrialEnd returns the TrialEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscription) GetTrialEnd() time.Time {
	if o == nil || IsNil(o.TrialEnd.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TrialEnd.Get()
}

// GetTrialEndOk returns a tuple with the TrialEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetTrialEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrialEnd.Get(), o.TrialEnd.IsSet()
}

// HasTrialEnd returns a boolean if a field has been set.
func (o *Subscription) HasTrialEnd() bool {
	if o != nil && o.TrialEnd.IsSet() {
		return true
	}

	return false
}

// SetTrialEnd gets a reference to the given NullableTime and assigns it to the TrialEnd field.
func (o *Subscription) SetTrialEnd(v time.Time) {
	o.TrialEnd.Set(&v)
}
// SetTrialEndNil sets the value for TrialEnd to be an explicit nil
func (o *Subscription) SetTrialEndNil() {
	o.TrialEnd.Set(nil)
}

// UnsetTrialEnd ensures that no value is present for TrialEnd, not even an explicit nil
func (o *Subscription) UnsetTrialEnd() {
	o.TrialEnd.Unset()
}

// GetCancelAt returns the CancelAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscription) GetCancelAt() time.Time {
	if o == nil || IsNil(o.CancelAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CancelAt.Get()
}

// GetCancelAtOk returns a tuple with the CancelAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetCancelAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelAt.Get(), o.CancelAt.IsSet()
}

// HasCancelAt returns a boolean if a field has been set.
func (o *Subscription) HasCancelAt() bool {
	if o != nil && o.CancelAt.IsSet() {
		return true
	}

	return false
}

// SetCancelAt gets a reference to the given NullableTime and assigns it to the CancelAt field.
func (o *Subscription) SetCancelAt(v time.Time) {
	o.CancelAt.Set(&v)
}
// SetCancelAtNil sets the value for CancelAt to be an explicit nil
func (o *Subscription) SetCancelAtNil() {
	o.CancelAt.Set(nil)
}

// UnsetCancelAt ensures that no value is present for CancelAt, not even an explicit nil
func (o *Subscription) UnsetCancelAt() {
	o.CancelAt.Unset()
}

// GetCanceledAt returns the CanceledAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscription) GetCanceledAt() time.Time {
	if o == nil || IsNil(o.CanceledAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CanceledAt.Get()
}

// GetCanceledAtOk returns a tuple with the CanceledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetCanceledAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanceledAt.Get(), o.CanceledAt.IsSet()
}

// HasCanceledAt returns a boolean if a field has been set.
func (o *Subscription) HasCanceledAt() bool {
	if o != nil && o.CanceledAt.IsSet() {
		return true
	}

	return false
}

// SetCanceledAt gets a reference to the given NullableTime and assigns it to the CanceledAt field.
func (o *Subscription) SetCanceledAt(v time.Time) {
	o.CanceledAt.Set(&v)
}
// SetCanceledAtNil sets the value for CanceledAt to be an explicit nil
func (o *Subscription) SetCanceledAtNil() {
	o.CanceledAt.Set(nil)
}

// UnsetCanceledAt ensures that no value is present for CanceledAt, not even an explicit nil
func (o *Subscription) UnsetCanceledAt() {
	o.CanceledAt.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Subscription) GetStatus() SubscriptionStatus {
	if o == nil || IsNil(o.Status) {
		var ret SubscriptionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetStatusOk() (*SubscriptionStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Subscription) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SubscriptionStatus and assigns it to the Status field.
func (o *Subscription) SetStatus(v SubscriptionStatus) {
	o.Status = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscription) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Subscription) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Subscription) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Subscription) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Subscription) UnsetDescription() {
	o.Description.Unset()
}

// GetManagedBy returns the ManagedBy field value
// If the value is explicit nil, the zero value for ManagedBy will be returned
func (o *Subscription) GetManagedBy() ManagedBy {
	if o == nil || o.ManagedBy.Get() == nil {
		var ret ManagedBy
		return ret
	}

	return *o.ManagedBy.Get()
}

// GetManagedByOk returns a tuple with the ManagedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetManagedByOk() (*ManagedBy, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagedBy.Get(), o.ManagedBy.IsSet()
}

// SetManagedBy sets field value
func (o *Subscription) SetManagedBy(v ManagedBy) {
	o.ManagedBy.Set(&v)
}

// GetAmount returns the Amount field value
func (o *Subscription) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Subscription) SetAmount(v float64) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *Subscription) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Subscription) SetCurrency(v string) {
	o.Currency = v
}

// GetLatestInvoice returns the LatestInvoice field value
// If the value is explicit nil, the zero value for Invoice will be returned
func (o *Subscription) GetLatestInvoice() Invoice {
	if o == nil || o.LatestInvoice.Get() == nil {
		var ret Invoice
		return ret
	}

	return *o.LatestInvoice.Get()
}

// GetLatestInvoiceOk returns a tuple with the LatestInvoice field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetLatestInvoiceOk() (*Invoice, bool) {
	if o == nil {
		return nil, false
	}
	return o.LatestInvoice.Get(), o.LatestInvoice.IsSet()
}

// SetLatestInvoice sets field value
func (o *Subscription) SetLatestInvoice(v Invoice) {
	o.LatestInvoice.Set(&v)
}

// GetPendingUpdate returns the PendingUpdate field value
// If the value is explicit nil, the zero value for SubscriptionPendingUpdate will be returned
func (o *Subscription) GetPendingUpdate() SubscriptionPendingUpdate {
	if o == nil || o.PendingUpdate.Get() == nil {
		var ret SubscriptionPendingUpdate
		return ret
	}

	return *o.PendingUpdate.Get()
}

// GetPendingUpdateOk returns a tuple with the PendingUpdate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscription) GetPendingUpdateOk() (*SubscriptionPendingUpdate, bool) {
	if o == nil {
		return nil, false
	}
	return o.PendingUpdate.Get(), o.PendingUpdate.IsSet()
}

// SetPendingUpdate sets field value
func (o *Subscription) SetPendingUpdate(v SubscriptionPendingUpdate) {
	o.PendingUpdate.Set(&v)
}

// GetPlan returns the Plan field value
func (o *Subscription) GetPlan() Plan {
	if o == nil {
		var ret Plan
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetPlanOk() (*Plan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *Subscription) SetPlan(v Plan) {
	o.Plan = v
}

// GetPlanPrice returns the PlanPrice field value
func (o *Subscription) GetPlanPrice() PlanPrice {
	if o == nil {
		var ret PlanPrice
		return ret
	}

	return o.PlanPrice
}

// GetPlanPriceOk returns a tuple with the PlanPrice field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetPlanPriceOk() (*PlanPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanPrice, true
}

// SetPlanPrice sets field value
func (o *Subscription) SetPlanPrice(v PlanPrice) {
	o.PlanPrice = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Subscription) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Subscription) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["start_date"] = o.StartDate
	if o.EndedAt.IsSet() {
		toSerialize["ended_at"] = o.EndedAt.Get()
	}
	toSerialize["current_period_start"] = o.CurrentPeriodStart
	toSerialize["current_period_end"] = o.CurrentPeriodEnd
	if o.TrialStart.IsSet() {
		toSerialize["trial_start"] = o.TrialStart.Get()
	}
	if o.TrialEnd.IsSet() {
		toSerialize["trial_end"] = o.TrialEnd.Get()
	}
	if o.CancelAt.IsSet() {
		toSerialize["cancel_at"] = o.CancelAt.Get()
	}
	if o.CanceledAt.IsSet() {
		toSerialize["canceled_at"] = o.CanceledAt.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["managed_by"] = o.ManagedBy.Get()
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["latest_invoice"] = o.LatestInvoice.Get()
	toSerialize["pending_update"] = o.PendingUpdate.Get()
	toSerialize["plan"] = o.Plan
	toSerialize["plan_price"] = o.PlanPrice
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Subscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"start_date",
		"current_period_start",
		"current_period_end",
		"managed_by",
		"amount",
		"currency",
		"latest_invoice",
		"pending_update",
		"plan",
		"plan_price",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscription := _Subscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscription)

	if err != nil {
		return err
	}

	*o = Subscription(varSubscription)

	return err
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


