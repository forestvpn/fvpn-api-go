/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// NodeConditionType * `ready` - Ready * `disk_pressure` - DiskPressure * `memory_pressure` - MemoryPressure * `pid_pressure` - PIDPressure * `cpu_pressure` - CPUPressure * `network_pressure` - NetworkPressure * `network_unavailable` - NetworkUnavailable
type NodeConditionType string

// List of NodeConditionType
const (
	NODECONDITIONTYPE_READY NodeConditionType = "ready"
	NODECONDITIONTYPE_DISK_PRESSURE NodeConditionType = "disk_pressure"
	NODECONDITIONTYPE_MEMORY_PRESSURE NodeConditionType = "memory_pressure"
	NODECONDITIONTYPE_PID_PRESSURE NodeConditionType = "pid_pressure"
	NODECONDITIONTYPE_CPU_PRESSURE NodeConditionType = "cpu_pressure"
	NODECONDITIONTYPE_NETWORK_PRESSURE NodeConditionType = "network_pressure"
	NODECONDITIONTYPE_NETWORK_UNAVAILABLE NodeConditionType = "network_unavailable"
)

// All allowed values of NodeConditionType enum
var AllowedNodeConditionTypeEnumValues = []NodeConditionType{
	"ready",
	"disk_pressure",
	"memory_pressure",
	"pid_pressure",
	"cpu_pressure",
	"network_pressure",
	"network_unavailable",
}

func (v *NodeConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NodeConditionType(value)
	for _, existing := range AllowedNodeConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NodeConditionType", value)
}

// NewNodeConditionTypeFromValue returns a pointer to a valid NodeConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNodeConditionTypeFromValue(v string) (*NodeConditionType, error) {
	ev := NodeConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NodeConditionType: valid values are %v", v, AllowedNodeConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NodeConditionType) IsValid() bool {
	for _, existing := range AllowedNodeConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NodeConditionType value
func (v NodeConditionType) Ptr() *NodeConditionType {
	return &v
}

type NullableNodeConditionType struct {
	value *NodeConditionType
	isSet bool
}

func (v NullableNodeConditionType) Get() *NodeConditionType {
	return v.value
}

func (v *NullableNodeConditionType) Set(val *NodeConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeConditionType(val *NodeConditionType) *NullableNodeConditionType {
	return &NullableNodeConditionType{value: val, isSet: true}
}

func (v NullableNodeConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

