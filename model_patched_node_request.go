/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
)

// checks if the PatchedNodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedNodeRequest{}

// PatchedNodeRequest struct for PatchedNodeRequest
type PatchedNodeRequest struct {
	Hostname *string `json:"hostname,omitempty" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	IpAddresses []string `json:"ip_addresses,omitempty"`
	Subnets []string `json:"subnets,omitempty"`
	Tags []string `json:"tags,omitempty"`
	IsPublic *bool `json:"is_public,omitempty"`
	PubKey *string `json:"pub_key,omitempty"`
	Ports []string `json:"ports,omitempty"`
	HttpsProxyPorts []string `json:"https_proxy_ports,omitempty"`
	Status *NodeStatus `json:"status,omitempty"`
	Os NullableString `json:"os,omitempty"`
	OsVersion NullableString `json:"os_version,omitempty"`
	OsArch NullableString `json:"os_arch,omitempty"`
	Distro NullableString `json:"distro,omitempty"`
	DistroVersion NullableString `json:"distro_version,omitempty"`
	DistroCodename NullableString `json:"distro_codename,omitempty"`
	AppVersion NullableString `json:"app_version,omitempty"`
	AppBuild NullableString `json:"app_build,omitempty"`
}

// NewPatchedNodeRequest instantiates a new PatchedNodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedNodeRequest() *PatchedNodeRequest {
	this := PatchedNodeRequest{}
	return &this
}

// NewPatchedNodeRequestWithDefaults instantiates a new PatchedNodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedNodeRequestWithDefaults() *PatchedNodeRequest {
	this := PatchedNodeRequest{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *PatchedNodeRequest) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodeRequest) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *PatchedNodeRequest) SetHostname(v string) {
	o.Hostname = &v
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *PatchedNodeRequest) GetIpAddresses() []string {
	if o == nil || IsNil(o.IpAddresses) {
		var ret []string
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodeRequest) GetIpAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *PatchedNodeRequest) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetSubnets() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *PatchedNodeRequest) SetSubnets(v []string) {
	o.Subnets = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PatchedNodeRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodeRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PatchedNodeRequest) SetTags(v []string) {
	o.Tags = v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *PatchedNodeRequest) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodeRequest) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *PatchedNodeRequest) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetPubKey returns the PubKey field value if set, zero value otherwise.
func (o *PatchedNodeRequest) GetPubKey() string {
	if o == nil || IsNil(o.PubKey) {
		var ret string
		return ret
	}
	return *o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodeRequest) GetPubKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PubKey) {
		return nil, false
	}
	return o.PubKey, true
}

// HasPubKey returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasPubKey() bool {
	if o != nil && !IsNil(o.PubKey) {
		return true
	}

	return false
}

// SetPubKey gets a reference to the given string and assigns it to the PubKey field.
func (o *PatchedNodeRequest) SetPubKey(v string) {
	o.PubKey = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *PatchedNodeRequest) GetPorts() []string {
	if o == nil || IsNil(o.Ports) {
		var ret []string
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodeRequest) GetPortsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []string and assigns it to the Ports field.
func (o *PatchedNodeRequest) SetPorts(v []string) {
	o.Ports = v
}

// GetHttpsProxyPorts returns the HttpsProxyPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetHttpsProxyPorts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HttpsProxyPorts
}

// GetHttpsProxyPortsOk returns a tuple with the HttpsProxyPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetHttpsProxyPortsOk() ([]string, bool) {
	if o == nil || IsNil(o.HttpsProxyPorts) {
		return nil, false
	}
	return o.HttpsProxyPorts, true
}

// HasHttpsProxyPorts returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasHttpsProxyPorts() bool {
	if o != nil && !IsNil(o.HttpsProxyPorts) {
		return true
	}

	return false
}

// SetHttpsProxyPorts gets a reference to the given []string and assigns it to the HttpsProxyPorts field.
func (o *PatchedNodeRequest) SetHttpsProxyPorts(v []string) {
	o.HttpsProxyPorts = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PatchedNodeRequest) GetStatus() NodeStatus {
	if o == nil || IsNil(o.Status) {
		var ret NodeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNodeRequest) GetStatusOk() (*NodeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NodeStatus and assigns it to the Status field.
func (o *PatchedNodeRequest) SetStatus(v NodeStatus) {
	o.Status = &v
}

// GetOs returns the Os field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetOs() string {
	if o == nil || IsNil(o.Os.Get()) {
		var ret string
		return ret
	}
	return *o.Os.Get()
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Os.Get(), o.Os.IsSet()
}

// HasOs returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasOs() bool {
	if o != nil && o.Os.IsSet() {
		return true
	}

	return false
}

// SetOs gets a reference to the given NullableString and assigns it to the Os field.
func (o *PatchedNodeRequest) SetOs(v string) {
	o.Os.Set(&v)
}
// SetOsNil sets the value for Os to be an explicit nil
func (o *PatchedNodeRequest) SetOsNil() {
	o.Os.Set(nil)
}

// UnsetOs ensures that no value is present for Os, not even an explicit nil
func (o *PatchedNodeRequest) UnsetOs() {
	o.Os.Unset()
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion.Get()) {
		var ret string
		return ret
	}
	return *o.OsVersion.Get()
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetOsVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsVersion.Get(), o.OsVersion.IsSet()
}

// HasOsVersion returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasOsVersion() bool {
	if o != nil && o.OsVersion.IsSet() {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given NullableString and assigns it to the OsVersion field.
func (o *PatchedNodeRequest) SetOsVersion(v string) {
	o.OsVersion.Set(&v)
}
// SetOsVersionNil sets the value for OsVersion to be an explicit nil
func (o *PatchedNodeRequest) SetOsVersionNil() {
	o.OsVersion.Set(nil)
}

// UnsetOsVersion ensures that no value is present for OsVersion, not even an explicit nil
func (o *PatchedNodeRequest) UnsetOsVersion() {
	o.OsVersion.Unset()
}

// GetOsArch returns the OsArch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetOsArch() string {
	if o == nil || IsNil(o.OsArch.Get()) {
		var ret string
		return ret
	}
	return *o.OsArch.Get()
}

// GetOsArchOk returns a tuple with the OsArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetOsArchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsArch.Get(), o.OsArch.IsSet()
}

// HasOsArch returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasOsArch() bool {
	if o != nil && o.OsArch.IsSet() {
		return true
	}

	return false
}

// SetOsArch gets a reference to the given NullableString and assigns it to the OsArch field.
func (o *PatchedNodeRequest) SetOsArch(v string) {
	o.OsArch.Set(&v)
}
// SetOsArchNil sets the value for OsArch to be an explicit nil
func (o *PatchedNodeRequest) SetOsArchNil() {
	o.OsArch.Set(nil)
}

// UnsetOsArch ensures that no value is present for OsArch, not even an explicit nil
func (o *PatchedNodeRequest) UnsetOsArch() {
	o.OsArch.Unset()
}

// GetDistro returns the Distro field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetDistro() string {
	if o == nil || IsNil(o.Distro.Get()) {
		var ret string
		return ret
	}
	return *o.Distro.Get()
}

// GetDistroOk returns a tuple with the Distro field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetDistroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Distro.Get(), o.Distro.IsSet()
}

// HasDistro returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasDistro() bool {
	if o != nil && o.Distro.IsSet() {
		return true
	}

	return false
}

// SetDistro gets a reference to the given NullableString and assigns it to the Distro field.
func (o *PatchedNodeRequest) SetDistro(v string) {
	o.Distro.Set(&v)
}
// SetDistroNil sets the value for Distro to be an explicit nil
func (o *PatchedNodeRequest) SetDistroNil() {
	o.Distro.Set(nil)
}

// UnsetDistro ensures that no value is present for Distro, not even an explicit nil
func (o *PatchedNodeRequest) UnsetDistro() {
	o.Distro.Unset()
}

// GetDistroVersion returns the DistroVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetDistroVersion() string {
	if o == nil || IsNil(o.DistroVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DistroVersion.Get()
}

// GetDistroVersionOk returns a tuple with the DistroVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetDistroVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistroVersion.Get(), o.DistroVersion.IsSet()
}

// HasDistroVersion returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasDistroVersion() bool {
	if o != nil && o.DistroVersion.IsSet() {
		return true
	}

	return false
}

// SetDistroVersion gets a reference to the given NullableString and assigns it to the DistroVersion field.
func (o *PatchedNodeRequest) SetDistroVersion(v string) {
	o.DistroVersion.Set(&v)
}
// SetDistroVersionNil sets the value for DistroVersion to be an explicit nil
func (o *PatchedNodeRequest) SetDistroVersionNil() {
	o.DistroVersion.Set(nil)
}

// UnsetDistroVersion ensures that no value is present for DistroVersion, not even an explicit nil
func (o *PatchedNodeRequest) UnsetDistroVersion() {
	o.DistroVersion.Unset()
}

// GetDistroCodename returns the DistroCodename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetDistroCodename() string {
	if o == nil || IsNil(o.DistroCodename.Get()) {
		var ret string
		return ret
	}
	return *o.DistroCodename.Get()
}

// GetDistroCodenameOk returns a tuple with the DistroCodename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetDistroCodenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistroCodename.Get(), o.DistroCodename.IsSet()
}

// HasDistroCodename returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasDistroCodename() bool {
	if o != nil && o.DistroCodename.IsSet() {
		return true
	}

	return false
}

// SetDistroCodename gets a reference to the given NullableString and assigns it to the DistroCodename field.
func (o *PatchedNodeRequest) SetDistroCodename(v string) {
	o.DistroCodename.Set(&v)
}
// SetDistroCodenameNil sets the value for DistroCodename to be an explicit nil
func (o *PatchedNodeRequest) SetDistroCodenameNil() {
	o.DistroCodename.Set(nil)
}

// UnsetDistroCodename ensures that no value is present for DistroCodename, not even an explicit nil
func (o *PatchedNodeRequest) UnsetDistroCodename() {
	o.DistroCodename.Unset()
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetAppVersion() string {
	if o == nil || IsNil(o.AppVersion.Get()) {
		var ret string
		return ret
	}
	return *o.AppVersion.Get()
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetAppVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppVersion.Get(), o.AppVersion.IsSet()
}

// HasAppVersion returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasAppVersion() bool {
	if o != nil && o.AppVersion.IsSet() {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given NullableString and assigns it to the AppVersion field.
func (o *PatchedNodeRequest) SetAppVersion(v string) {
	o.AppVersion.Set(&v)
}
// SetAppVersionNil sets the value for AppVersion to be an explicit nil
func (o *PatchedNodeRequest) SetAppVersionNil() {
	o.AppVersion.Set(nil)
}

// UnsetAppVersion ensures that no value is present for AppVersion, not even an explicit nil
func (o *PatchedNodeRequest) UnsetAppVersion() {
	o.AppVersion.Unset()
}

// GetAppBuild returns the AppBuild field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedNodeRequest) GetAppBuild() string {
	if o == nil || IsNil(o.AppBuild.Get()) {
		var ret string
		return ret
	}
	return *o.AppBuild.Get()
}

// GetAppBuildOk returns a tuple with the AppBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedNodeRequest) GetAppBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppBuild.Get(), o.AppBuild.IsSet()
}

// HasAppBuild returns a boolean if a field has been set.
func (o *PatchedNodeRequest) HasAppBuild() bool {
	if o != nil && o.AppBuild.IsSet() {
		return true
	}

	return false
}

// SetAppBuild gets a reference to the given NullableString and assigns it to the AppBuild field.
func (o *PatchedNodeRequest) SetAppBuild(v string) {
	o.AppBuild.Set(&v)
}
// SetAppBuildNil sets the value for AppBuild to be an explicit nil
func (o *PatchedNodeRequest) SetAppBuildNil() {
	o.AppBuild.Set(nil)
}

// UnsetAppBuild ensures that no value is present for AppBuild, not even an explicit nil
func (o *PatchedNodeRequest) UnsetAppBuild() {
	o.AppBuild.Unset()
}

func (o PatchedNodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedNodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.IpAddresses) {
		toSerialize["ip_addresses"] = o.IpAddresses
	}
	if o.Subnets != nil {
		toSerialize["subnets"] = o.Subnets
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}
	if !IsNil(o.PubKey) {
		toSerialize["pub_key"] = o.PubKey
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if o.HttpsProxyPorts != nil {
		toSerialize["https_proxy_ports"] = o.HttpsProxyPorts
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Os.IsSet() {
		toSerialize["os"] = o.Os.Get()
	}
	if o.OsVersion.IsSet() {
		toSerialize["os_version"] = o.OsVersion.Get()
	}
	if o.OsArch.IsSet() {
		toSerialize["os_arch"] = o.OsArch.Get()
	}
	if o.Distro.IsSet() {
		toSerialize["distro"] = o.Distro.Get()
	}
	if o.DistroVersion.IsSet() {
		toSerialize["distro_version"] = o.DistroVersion.Get()
	}
	if o.DistroCodename.IsSet() {
		toSerialize["distro_codename"] = o.DistroCodename.Get()
	}
	if o.AppVersion.IsSet() {
		toSerialize["app_version"] = o.AppVersion.Get()
	}
	if o.AppBuild.IsSet() {
		toSerialize["app_build"] = o.AppBuild.Get()
	}
	return toSerialize, nil
}

type NullablePatchedNodeRequest struct {
	value *PatchedNodeRequest
	isSet bool
}

func (v NullablePatchedNodeRequest) Get() *PatchedNodeRequest {
	return v.value
}

func (v *NullablePatchedNodeRequest) Set(val *PatchedNodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedNodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedNodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedNodeRequest(val *PatchedNodeRequest) *NullablePatchedNodeRequest {
	return &NullablePatchedNodeRequest{value: val, isSet: true}
}

func (v NullablePatchedNodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedNodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


