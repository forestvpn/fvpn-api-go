/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeConditionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeConditionRequest{}

// NodeConditionRequest struct for NodeConditionRequest
type NodeConditionRequest struct {
	Condition Condition `json:"condition"`
	Status bool `json:"status"`
	Message NullableString `json:"message,omitempty"`
}

type _NodeConditionRequest NodeConditionRequest

// NewNodeConditionRequest instantiates a new NodeConditionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeConditionRequest(condition Condition, status bool) *NodeConditionRequest {
	this := NodeConditionRequest{}
	this.Condition = condition
	this.Status = status
	return &this
}

// NewNodeConditionRequestWithDefaults instantiates a new NodeConditionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeConditionRequestWithDefaults() *NodeConditionRequest {
	this := NodeConditionRequest{}
	return &this
}

// GetCondition returns the Condition field value
func (o *NodeConditionRequest) GetCondition() Condition {
	if o == nil {
		var ret Condition
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *NodeConditionRequest) GetConditionOk() (*Condition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *NodeConditionRequest) SetCondition(v Condition) {
	o.Condition = v
}

// GetStatus returns the Status field value
func (o *NodeConditionRequest) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NodeConditionRequest) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NodeConditionRequest) SetStatus(v bool) {
	o.Status = v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeConditionRequest) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeConditionRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *NodeConditionRequest) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *NodeConditionRequest) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *NodeConditionRequest) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *NodeConditionRequest) UnsetMessage() {
	o.Message.Unset()
}

func (o NodeConditionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeConditionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["condition"] = o.Condition
	toSerialize["status"] = o.Status
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	return toSerialize, nil
}

func (o *NodeConditionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"condition",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeConditionRequest := _NodeConditionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeConditionRequest)

	if err != nil {
		return err
	}

	*o = NodeConditionRequest(varNodeConditionRequest)

	return err
}

type NullableNodeConditionRequest struct {
	value *NodeConditionRequest
	isSet bool
}

func (v NullableNodeConditionRequest) Get() *NodeConditionRequest {
	return v.value
}

func (v *NullableNodeConditionRequest) Set(val *NodeConditionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeConditionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeConditionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeConditionRequest(val *NodeConditionRequest) *NullableNodeConditionRequest {
	return &NullableNodeConditionRequest{value: val, isSet: true}
}

func (v NullableNodeConditionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeConditionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


