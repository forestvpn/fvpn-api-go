/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegionDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionDetail{}

// RegionDetail struct for RegionDetail
type RegionDetail struct {
	Id string `json:"id"`
	// Short code identifier for the region
	Code string `json:"code"`
	Name string `json:"name"`
	Description NullableString `json:"description,omitempty"`
	Countries []Country `json:"countries"`
}

type _RegionDetail RegionDetail

// NewRegionDetail instantiates a new RegionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionDetail(id string, code string, name string, countries []Country) *RegionDetail {
	this := RegionDetail{}
	this.Id = id
	this.Code = code
	this.Name = name
	this.Countries = countries
	return &this
}

// NewRegionDetailWithDefaults instantiates a new RegionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionDetailWithDefaults() *RegionDetail {
	this := RegionDetail{}
	return &this
}

// GetId returns the Id field value
func (o *RegionDetail) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RegionDetail) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RegionDetail) SetId(v string) {
	o.Id = v
}

// GetCode returns the Code field value
func (o *RegionDetail) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *RegionDetail) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *RegionDetail) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *RegionDetail) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegionDetail) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegionDetail) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegionDetail) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionDetail) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *RegionDetail) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *RegionDetail) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *RegionDetail) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *RegionDetail) UnsetDescription() {
	o.Description.Unset()
}

// GetCountries returns the Countries field value
func (o *RegionDetail) GetCountries() []Country {
	if o == nil {
		var ret []Country
		return ret
	}

	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value
// and a boolean to check if the value has been set.
func (o *RegionDetail) GetCountriesOk() ([]Country, bool) {
	if o == nil {
		return nil, false
	}
	return o.Countries, true
}

// SetCountries sets field value
func (o *RegionDetail) SetCountries(v []Country) {
	o.Countries = v
}

func (o RegionDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["code"] = o.Code
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["countries"] = o.Countries
	return toSerialize, nil
}

func (o *RegionDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"code",
		"name",
		"countries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegionDetail := _RegionDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegionDetail)

	if err != nil {
		return err
	}

	*o = RegionDetail(varRegionDetail)

	return err
}

type NullableRegionDetail struct {
	value *RegionDetail
	isSet bool
}

func (v NullableRegionDetail) Get() *RegionDetail {
	return v.value
}

func (v *NullableRegionDetail) Set(val *RegionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionDetail(val *RegionDetail) *NullableRegionDetail {
	return &NullableRegionDetail{value: val, isSet: true}
}

func (v NullableRegionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


