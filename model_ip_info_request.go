/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IPInfoRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPInfoRequest{}

// IPInfoRequest struct for IPInfoRequest
type IPInfoRequest struct {
	Ip string `json:"ip"`
	Asn ASNRequest `json:"asn"`
	Country CountryRequest `json:"country"`
	Location LocationRequest `json:"location"`
	Lat NullableFloat64 `json:"lat,omitempty"`
	Lon NullableFloat64 `json:"lon,omitempty"`
}

type _IPInfoRequest IPInfoRequest

// NewIPInfoRequest instantiates a new IPInfoRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPInfoRequest(ip string, asn ASNRequest, country CountryRequest, location LocationRequest) *IPInfoRequest {
	this := IPInfoRequest{}
	this.Ip = ip
	this.Asn = asn
	this.Country = country
	this.Location = location
	return &this
}

// NewIPInfoRequestWithDefaults instantiates a new IPInfoRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPInfoRequestWithDefaults() *IPInfoRequest {
	this := IPInfoRequest{}
	return &this
}

// GetIp returns the Ip field value
func (o *IPInfoRequest) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *IPInfoRequest) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *IPInfoRequest) SetIp(v string) {
	o.Ip = v
}

// GetAsn returns the Asn field value
func (o *IPInfoRequest) GetAsn() ASNRequest {
	if o == nil {
		var ret ASNRequest
		return ret
	}

	return o.Asn
}

// GetAsnOk returns a tuple with the Asn field value
// and a boolean to check if the value has been set.
func (o *IPInfoRequest) GetAsnOk() (*ASNRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asn, true
}

// SetAsn sets field value
func (o *IPInfoRequest) SetAsn(v ASNRequest) {
	o.Asn = v
}

// GetCountry returns the Country field value
func (o *IPInfoRequest) GetCountry() CountryRequest {
	if o == nil {
		var ret CountryRequest
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *IPInfoRequest) GetCountryOk() (*CountryRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *IPInfoRequest) SetCountry(v CountryRequest) {
	o.Country = v
}

// GetLocation returns the Location field value
func (o *IPInfoRequest) GetLocation() LocationRequest {
	if o == nil {
		var ret LocationRequest
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *IPInfoRequest) GetLocationOk() (*LocationRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *IPInfoRequest) SetLocation(v LocationRequest) {
	o.Location = v
}

// GetLat returns the Lat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPInfoRequest) GetLat() float64 {
	if o == nil || IsNil(o.Lat.Get()) {
		var ret float64
		return ret
	}
	return *o.Lat.Get()
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPInfoRequest) GetLatOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lat.Get(), o.Lat.IsSet()
}

// HasLat returns a boolean if a field has been set.
func (o *IPInfoRequest) HasLat() bool {
	if o != nil && o.Lat.IsSet() {
		return true
	}

	return false
}

// SetLat gets a reference to the given NullableFloat64 and assigns it to the Lat field.
func (o *IPInfoRequest) SetLat(v float64) {
	o.Lat.Set(&v)
}
// SetLatNil sets the value for Lat to be an explicit nil
func (o *IPInfoRequest) SetLatNil() {
	o.Lat.Set(nil)
}

// UnsetLat ensures that no value is present for Lat, not even an explicit nil
func (o *IPInfoRequest) UnsetLat() {
	o.Lat.Unset()
}

// GetLon returns the Lon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPInfoRequest) GetLon() float64 {
	if o == nil || IsNil(o.Lon.Get()) {
		var ret float64
		return ret
	}
	return *o.Lon.Get()
}

// GetLonOk returns a tuple with the Lon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPInfoRequest) GetLonOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lon.Get(), o.Lon.IsSet()
}

// HasLon returns a boolean if a field has been set.
func (o *IPInfoRequest) HasLon() bool {
	if o != nil && o.Lon.IsSet() {
		return true
	}

	return false
}

// SetLon gets a reference to the given NullableFloat64 and assigns it to the Lon field.
func (o *IPInfoRequest) SetLon(v float64) {
	o.Lon.Set(&v)
}
// SetLonNil sets the value for Lon to be an explicit nil
func (o *IPInfoRequest) SetLonNil() {
	o.Lon.Set(nil)
}

// UnsetLon ensures that no value is present for Lon, not even an explicit nil
func (o *IPInfoRequest) UnsetLon() {
	o.Lon.Unset()
}

func (o IPInfoRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPInfoRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	toSerialize["asn"] = o.Asn
	toSerialize["country"] = o.Country
	toSerialize["location"] = o.Location
	if o.Lat.IsSet() {
		toSerialize["lat"] = o.Lat.Get()
	}
	if o.Lon.IsSet() {
		toSerialize["lon"] = o.Lon.Get()
	}
	return toSerialize, nil
}

func (o *IPInfoRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
		"asn",
		"country",
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIPInfoRequest := _IPInfoRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIPInfoRequest)

	if err != nil {
		return err
	}

	*o = IPInfoRequest(varIPInfoRequest)

	return err
}

type NullableIPInfoRequest struct {
	value *IPInfoRequest
	isSet bool
}

func (v NullableIPInfoRequest) Get() *IPInfoRequest {
	return v.value
}

func (v *NullableIPInfoRequest) Set(val *IPInfoRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIPInfoRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIPInfoRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPInfoRequest(val *IPInfoRequest) *NullableIPInfoRequest {
	return &NullableIPInfoRequest{value: val, isSet: true}
}

func (v NullableIPInfoRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPInfoRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


