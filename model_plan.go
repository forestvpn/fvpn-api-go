/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Plan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plan{}

// Plan struct for Plan
type Plan struct {
	Id string `json:"id"`
	Slug string `json:"slug" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	Name string `json:"name"`
	Description NullableString `json:"description,omitempty"`
	IsMostPopular *bool `json:"is_most_popular,omitempty"`
	Prices []PlanPrice `json:"prices"`
	Currencies NullableString `json:"currencies"`
}

type _Plan Plan

// NewPlan instantiates a new Plan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlan(id string, slug string, name string, prices []PlanPrice, currencies NullableString) *Plan {
	this := Plan{}
	this.Id = id
	this.Slug = slug
	this.Name = name
	this.Prices = prices
	this.Currencies = currencies
	return &this
}

// NewPlanWithDefaults instantiates a new Plan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWithDefaults() *Plan {
	this := Plan{}
	return &this
}

// GetId returns the Id field value
func (o *Plan) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Plan) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Plan) SetId(v string) {
	o.Id = v
}

// GetSlug returns the Slug field value
func (o *Plan) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *Plan) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *Plan) SetSlug(v string) {
	o.Slug = v
}

// GetName returns the Name field value
func (o *Plan) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Plan) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Plan) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Plan) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Plan) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Plan) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Plan) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Plan) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Plan) UnsetDescription() {
	o.Description.Unset()
}

// GetIsMostPopular returns the IsMostPopular field value if set, zero value otherwise.
func (o *Plan) GetIsMostPopular() bool {
	if o == nil || IsNil(o.IsMostPopular) {
		var ret bool
		return ret
	}
	return *o.IsMostPopular
}

// GetIsMostPopularOk returns a tuple with the IsMostPopular field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetIsMostPopularOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMostPopular) {
		return nil, false
	}
	return o.IsMostPopular, true
}

// HasIsMostPopular returns a boolean if a field has been set.
func (o *Plan) HasIsMostPopular() bool {
	if o != nil && !IsNil(o.IsMostPopular) {
		return true
	}

	return false
}

// SetIsMostPopular gets a reference to the given bool and assigns it to the IsMostPopular field.
func (o *Plan) SetIsMostPopular(v bool) {
	o.IsMostPopular = &v
}

// GetPrices returns the Prices field value
// If the value is explicit nil, the zero value for []PlanPrice will be returned
func (o *Plan) GetPrices() []PlanPrice {
	if o == nil {
		var ret []PlanPrice
		return ret
	}

	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Plan) GetPricesOk() ([]PlanPrice, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// SetPrices sets field value
func (o *Plan) SetPrices(v []PlanPrice) {
	o.Prices = v
}

// GetCurrencies returns the Currencies field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Plan) GetCurrencies() string {
	if o == nil || o.Currencies.Get() == nil {
		var ret string
		return ret
	}

	return *o.Currencies.Get()
}

// GetCurrenciesOk returns a tuple with the Currencies field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Plan) GetCurrenciesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currencies.Get(), o.Currencies.IsSet()
}

// SetCurrencies sets field value
func (o *Plan) SetCurrencies(v string) {
	o.Currencies.Set(&v)
}

func (o Plan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["slug"] = o.Slug
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.IsMostPopular) {
		toSerialize["is_most_popular"] = o.IsMostPopular
	}
	if o.Prices != nil {
		toSerialize["prices"] = o.Prices
	}
	toSerialize["currencies"] = o.Currencies.Get()
	return toSerialize, nil
}

func (o *Plan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"slug",
		"name",
		"prices",
		"currencies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlan := _Plan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlan)

	if err != nil {
		return err
	}

	*o = Plan(varPlan)

	return err
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


