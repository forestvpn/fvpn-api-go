/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// Condition * `ready` - Ready * `disk_pressure` - DiskPressure * `memory_pressure` - MemoryPressure * `pid_pressure` - PIDPressure * `cpu_pressure` - CPUPressure * `network_pressure` - NetworkPressure * `network_unavailable` - NetworkUnavailable
type Condition string

// List of Condition
const (
	CONDITION_READY Condition = "ready"
	CONDITION_DISK_PRESSURE Condition = "disk_pressure"
	CONDITION_MEMORY_PRESSURE Condition = "memory_pressure"
	CONDITION_PID_PRESSURE Condition = "pid_pressure"
	CONDITION_CPU_PRESSURE Condition = "cpu_pressure"
	CONDITION_NETWORK_PRESSURE Condition = "network_pressure"
	CONDITION_NETWORK_UNAVAILABLE Condition = "network_unavailable"
)

// All allowed values of Condition enum
var AllowedConditionEnumValues = []Condition{
	"ready",
	"disk_pressure",
	"memory_pressure",
	"pid_pressure",
	"cpu_pressure",
	"network_pressure",
	"network_unavailable",
}

func (v *Condition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Condition(value)
	for _, existing := range AllowedConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Condition", value)
}

// NewConditionFromValue returns a pointer to a valid Condition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConditionFromValue(v string) (*Condition, error) {
	ev := Condition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Condition: valid values are %v", v, AllowedConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Condition) IsValid() bool {
	for _, existing := range AllowedConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Condition value
func (v Condition) Ptr() *Condition {
	return &v
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

