/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeDataUsageItemRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeDataUsageItemRequest{}

// NodeDataUsageItemRequest struct for NodeDataUsageItemRequest
type NodeDataUsageItemRequest struct {
	// Unique identifier for the record, it may be pub_key, ipv4, ipv6 or device_id
	Id string `json:"id"`
	// Protocol used for the record
	Proto string `json:"proto"`
	// Total bytes sent
	Tx *int64 `json:"tx,omitempty"`
	// Total bytes received
	Rx *int64 `json:"rx,omitempty"`
}

type _NodeDataUsageItemRequest NodeDataUsageItemRequest

// NewNodeDataUsageItemRequest instantiates a new NodeDataUsageItemRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeDataUsageItemRequest(id string, proto string) *NodeDataUsageItemRequest {
	this := NodeDataUsageItemRequest{}
	this.Id = id
	this.Proto = proto
	return &this
}

// NewNodeDataUsageItemRequestWithDefaults instantiates a new NodeDataUsageItemRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeDataUsageItemRequestWithDefaults() *NodeDataUsageItemRequest {
	this := NodeDataUsageItemRequest{}
	return &this
}

// GetId returns the Id field value
func (o *NodeDataUsageItemRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NodeDataUsageItemRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NodeDataUsageItemRequest) SetId(v string) {
	o.Id = v
}

// GetProto returns the Proto field value
func (o *NodeDataUsageItemRequest) GetProto() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Proto
}

// GetProtoOk returns a tuple with the Proto field value
// and a boolean to check if the value has been set.
func (o *NodeDataUsageItemRequest) GetProtoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proto, true
}

// SetProto sets field value
func (o *NodeDataUsageItemRequest) SetProto(v string) {
	o.Proto = v
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *NodeDataUsageItemRequest) GetTx() int64 {
	if o == nil || IsNil(o.Tx) {
		var ret int64
		return ret
	}
	return *o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDataUsageItemRequest) GetTxOk() (*int64, bool) {
	if o == nil || IsNil(o.Tx) {
		return nil, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *NodeDataUsageItemRequest) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given int64 and assigns it to the Tx field.
func (o *NodeDataUsageItemRequest) SetTx(v int64) {
	o.Tx = &v
}

// GetRx returns the Rx field value if set, zero value otherwise.
func (o *NodeDataUsageItemRequest) GetRx() int64 {
	if o == nil || IsNil(o.Rx) {
		var ret int64
		return ret
	}
	return *o.Rx
}

// GetRxOk returns a tuple with the Rx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDataUsageItemRequest) GetRxOk() (*int64, bool) {
	if o == nil || IsNil(o.Rx) {
		return nil, false
	}
	return o.Rx, true
}

// HasRx returns a boolean if a field has been set.
func (o *NodeDataUsageItemRequest) HasRx() bool {
	if o != nil && !IsNil(o.Rx) {
		return true
	}

	return false
}

// SetRx gets a reference to the given int64 and assigns it to the Rx field.
func (o *NodeDataUsageItemRequest) SetRx(v int64) {
	o.Rx = &v
}

func (o NodeDataUsageItemRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeDataUsageItemRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["proto"] = o.Proto
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	if !IsNil(o.Rx) {
		toSerialize["rx"] = o.Rx
	}
	return toSerialize, nil
}

func (o *NodeDataUsageItemRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"proto",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeDataUsageItemRequest := _NodeDataUsageItemRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeDataUsageItemRequest)

	if err != nil {
		return err
	}

	*o = NodeDataUsageItemRequest(varNodeDataUsageItemRequest)

	return err
}

type NullableNodeDataUsageItemRequest struct {
	value *NodeDataUsageItemRequest
	isSet bool
}

func (v NullableNodeDataUsageItemRequest) Get() *NodeDataUsageItemRequest {
	return v.value
}

func (v *NullableNodeDataUsageItemRequest) Set(val *NodeDataUsageItemRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeDataUsageItemRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeDataUsageItemRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeDataUsageItemRequest(val *NodeDataUsageItemRequest) *NullableNodeDataUsageItemRequest {
	return &NullableNodeDataUsageItemRequest{value: val, isSet: true}
}

func (v NullableNodeDataUsageItemRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeDataUsageItemRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


