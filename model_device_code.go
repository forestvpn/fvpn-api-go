/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DeviceCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceCode{}

// DeviceCode Serializer for checking device code status.  Used for GET /v1/account/codes/{code}/ endpoint. Returns different fields based on the code status.
type DeviceCode struct {
	// 6-character device authentication code
	Code string `json:"code"`
	// When this code expires
	ExpiresAt time.Time `json:"expires_at"`
	Status *DeviceCodeStatus `json:"status,omitempty"`
	// JWT access token generated after approval
	AccessToken NullableString `json:"access_token"`
	// JWT refresh token generated after approval
	RefreshToken NullableString `json:"refresh_token"`
	// Generate the approval URL for the device code.
	ApprovalUrl string `json:"approval_url"`
	AdditionalProperties map[string]interface{}
}

type _DeviceCode DeviceCode

// NewDeviceCode instantiates a new DeviceCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceCode(code string, expiresAt time.Time, accessToken NullableString, refreshToken NullableString, approvalUrl string) *DeviceCode {
	this := DeviceCode{}
	this.Code = code
	this.ExpiresAt = expiresAt
	this.AccessToken = accessToken
	this.RefreshToken = refreshToken
	this.ApprovalUrl = approvalUrl
	return &this
}

// NewDeviceCodeWithDefaults instantiates a new DeviceCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceCodeWithDefaults() *DeviceCode {
	this := DeviceCode{}
	return &this
}

// GetCode returns the Code field value
func (o *DeviceCode) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *DeviceCode) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *DeviceCode) SetCode(v string) {
	o.Code = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *DeviceCode) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *DeviceCode) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *DeviceCode) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceCode) GetStatus() DeviceCodeStatus {
	if o == nil || IsNil(o.Status) {
		var ret DeviceCodeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCode) GetStatusOk() (*DeviceCodeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceCode) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DeviceCodeStatus and assigns it to the Status field.
func (o *DeviceCode) SetStatus(v DeviceCodeStatus) {
	o.Status = &v
}

// GetAccessToken returns the AccessToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DeviceCode) GetAccessToken() string {
	if o == nil || o.AccessToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccessToken.Get()
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceCode) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessToken.Get(), o.AccessToken.IsSet()
}

// SetAccessToken sets field value
func (o *DeviceCode) SetAccessToken(v string) {
	o.AccessToken.Set(&v)
}

// GetRefreshToken returns the RefreshToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DeviceCode) GetRefreshToken() string {
	if o == nil || o.RefreshToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.RefreshToken.Get()
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceCode) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefreshToken.Get(), o.RefreshToken.IsSet()
}

// SetRefreshToken sets field value
func (o *DeviceCode) SetRefreshToken(v string) {
	o.RefreshToken.Set(&v)
}

// GetApprovalUrl returns the ApprovalUrl field value
func (o *DeviceCode) GetApprovalUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApprovalUrl
}

// GetApprovalUrlOk returns a tuple with the ApprovalUrl field value
// and a boolean to check if the value has been set.
func (o *DeviceCode) GetApprovalUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApprovalUrl, true
}

// SetApprovalUrl sets field value
func (o *DeviceCode) SetApprovalUrl(v string) {
	o.ApprovalUrl = v
}

func (o DeviceCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["expires_at"] = o.ExpiresAt
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["access_token"] = o.AccessToken.Get()
	toSerialize["refresh_token"] = o.RefreshToken.Get()
	toSerialize["approval_url"] = o.ApprovalUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceCode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"expires_at",
		"access_token",
		"refresh_token",
		"approval_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceCode := _DeviceCode{}

	err = json.Unmarshal(data, &varDeviceCode)

	if err != nil {
		return err
	}

	*o = DeviceCode(varDeviceCode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "status")
		delete(additionalProperties, "access_token")
		delete(additionalProperties, "refresh_token")
		delete(additionalProperties, "approval_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceCode struct {
	value *DeviceCode
	isSet bool
}

func (v NullableDeviceCode) Get() *DeviceCode {
	return v.value
}

func (v *NullableDeviceCode) Set(val *DeviceCode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCode(val *DeviceCode) *NullableDeviceCode {
	return &NullableDeviceCode{value: val, isSet: true}
}

func (v NullableDeviceCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


