/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// Null the model 'Null'
type Null string

// List of Null
const (
)

// All allowed values of Null enum
var AllowedNullEnumValues = []Null{
}

func (v *Null) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Null(value)
	for _, existing := range AllowedNullEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Null", value)
}

// NewNullFromValue returns a pointer to a valid Null
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNullFromValue(v string) (*Null, error) {
	ev := Null(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Null: valid values are %v", v, AllowedNullEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Null) IsValid() bool {
	for _, existing := range AllowedNullEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Null value
func (v Null) Ptr() *Null {
	return &v
}

type NullableNull struct {
	value *Null
	isSet bool
}

func (v NullableNull) Get() *Null {
	return v.value
}

func (v *NullableNull) Set(val *Null) {
	v.value = val
	v.isSet = true
}

func (v NullableNull) IsSet() bool {
	return v.isSet
}

func (v *NullableNull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNull(val *Null) *NullableNull {
	return &NullableNull{value: val, isSet: true}
}

func (v NullableNull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

