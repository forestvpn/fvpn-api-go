/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceAnalytics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceAnalytics{}

// DeviceAnalytics Response for device analytics.
type DeviceAnalytics struct {
	Device DeviceAnalyticsDevice `json:"device"`
	Current SummaryPeriod `json:"current"`
	Previous *SummaryPeriod `json:"previous,omitempty"`
	PercentChange *float64 `json:"percent_change,omitempty"`
}

type _DeviceAnalytics DeviceAnalytics

// NewDeviceAnalytics instantiates a new DeviceAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAnalytics(device DeviceAnalyticsDevice, current SummaryPeriod) *DeviceAnalytics {
	this := DeviceAnalytics{}
	this.Device = device
	this.Current = current
	return &this
}

// NewDeviceAnalyticsWithDefaults instantiates a new DeviceAnalytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAnalyticsWithDefaults() *DeviceAnalytics {
	this := DeviceAnalytics{}
	return &this
}

// GetDevice returns the Device field value
func (o *DeviceAnalytics) GetDevice() DeviceAnalyticsDevice {
	if o == nil {
		var ret DeviceAnalyticsDevice
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *DeviceAnalytics) GetDeviceOk() (*DeviceAnalyticsDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *DeviceAnalytics) SetDevice(v DeviceAnalyticsDevice) {
	o.Device = v
}

// GetCurrent returns the Current field value
func (o *DeviceAnalytics) GetCurrent() SummaryPeriod {
	if o == nil {
		var ret SummaryPeriod
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *DeviceAnalytics) GetCurrentOk() (*SummaryPeriod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *DeviceAnalytics) SetCurrent(v SummaryPeriod) {
	o.Current = v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *DeviceAnalytics) GetPrevious() SummaryPeriod {
	if o == nil || IsNil(o.Previous) {
		var ret SummaryPeriod
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAnalytics) GetPreviousOk() (*SummaryPeriod, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *DeviceAnalytics) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given SummaryPeriod and assigns it to the Previous field.
func (o *DeviceAnalytics) SetPrevious(v SummaryPeriod) {
	o.Previous = &v
}

// GetPercentChange returns the PercentChange field value if set, zero value otherwise.
func (o *DeviceAnalytics) GetPercentChange() float64 {
	if o == nil || IsNil(o.PercentChange) {
		var ret float64
		return ret
	}
	return *o.PercentChange
}

// GetPercentChangeOk returns a tuple with the PercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAnalytics) GetPercentChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.PercentChange) {
		return nil, false
	}
	return o.PercentChange, true
}

// HasPercentChange returns a boolean if a field has been set.
func (o *DeviceAnalytics) HasPercentChange() bool {
	if o != nil && !IsNil(o.PercentChange) {
		return true
	}

	return false
}

// SetPercentChange gets a reference to the given float64 and assigns it to the PercentChange field.
func (o *DeviceAnalytics) SetPercentChange(v float64) {
	o.PercentChange = &v
}

func (o DeviceAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceAnalytics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device"] = o.Device
	toSerialize["current"] = o.Current
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	if !IsNil(o.PercentChange) {
		toSerialize["percent_change"] = o.PercentChange
	}
	return toSerialize, nil
}

func (o *DeviceAnalytics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device",
		"current",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceAnalytics := _DeviceAnalytics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceAnalytics)

	if err != nil {
		return err
	}

	*o = DeviceAnalytics(varDeviceAnalytics)

	return err
}

type NullableDeviceAnalytics struct {
	value *DeviceAnalytics
	isSet bool
}

func (v NullableDeviceAnalytics) Get() *DeviceAnalytics {
	return v.value
}

func (v *NullableDeviceAnalytics) Set(val *DeviceAnalytics) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAnalytics(val *DeviceAnalytics) *NullableDeviceAnalytics {
	return &NullableDeviceAnalytics{value: val, isSet: true}
}

func (v NullableDeviceAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


