/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// WalletStatus * `_wallet_dummy` - Wallet Dummy * `pending` - Pending * `active` - Active * `suspended` - Suspended * `canceled` - Canceled
type WalletStatus string

// List of WalletStatus
const (
	WALLETSTATUS_WALLET_DUMMY WalletStatus = "_wallet_dummy"
	WALLETSTATUS_PENDING WalletStatus = "pending"
	WALLETSTATUS_ACTIVE WalletStatus = "active"
	WALLETSTATUS_SUSPENDED WalletStatus = "suspended"
	WALLETSTATUS_CANCELED WalletStatus = "canceled"
)

// All allowed values of WalletStatus enum
var AllowedWalletStatusEnumValues = []WalletStatus{
	"_wallet_dummy",
	"pending",
	"active",
	"suspended",
	"canceled",
}

func (v *WalletStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WalletStatus(value)
	for _, existing := range AllowedWalletStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WalletStatus", value)
}

// NewWalletStatusFromValue returns a pointer to a valid WalletStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWalletStatusFromValue(v string) (*WalletStatus, error) {
	ev := WalletStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WalletStatus: valid values are %v", v, AllowedWalletStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WalletStatus) IsValid() bool {
	for _, existing := range AllowedWalletStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WalletStatus value
func (v WalletStatus) Ptr() *WalletStatus {
	return &v
}

type NullableWalletStatus struct {
	value *WalletStatus
	isSet bool
}

func (v NullableWalletStatus) Get() *WalletStatus {
	return v.value
}

func (v *NullableWalletStatus) Set(val *WalletStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletStatus(val *WalletStatus) *NullableWalletStatus {
	return &NullableWalletStatus{value: val, isSet: true}
}

func (v NullableWalletStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

