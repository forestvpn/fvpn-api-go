/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Wallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wallet{}

// Wallet Serializer for wallet details.
type Wallet struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Status WalletStatus `json:"status"`
	// Currency for this wallet in ISO 4217 format
	Currency string `json:"currency"`
	Balance float64 `json:"balance"`
	CreditsBalance float64 `json:"credits_balance"`
	ConsumedBalance float64 `json:"consumed_balance"`
	IsActive bool `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	RecentTransactions []WalletTransaction `json:"recent_transactions"`
	AdditionalProperties map[string]interface{}
}

type _Wallet Wallet

// NewWallet instantiates a new Wallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWallet(id string, name string, status WalletStatus, currency string, balance float64, creditsBalance float64, consumedBalance float64, isActive bool, createdAt time.Time, updatedAt time.Time, recentTransactions []WalletTransaction) *Wallet {
	this := Wallet{}
	this.Id = id
	this.Name = name
	this.Status = status
	this.Currency = currency
	this.Balance = balance
	this.CreditsBalance = creditsBalance
	this.ConsumedBalance = consumedBalance
	this.IsActive = isActive
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.RecentTransactions = recentTransactions
	return &this
}

// NewWalletWithDefaults instantiates a new Wallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletWithDefaults() *Wallet {
	this := Wallet{}
	return &this
}

// GetId returns the Id field value
func (o *Wallet) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Wallet) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Wallet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Wallet) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *Wallet) GetStatus() WalletStatus {
	if o == nil {
		var ret WalletStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetStatusOk() (*WalletStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Wallet) SetStatus(v WalletStatus) {
	o.Status = v
}

// GetCurrency returns the Currency field value
func (o *Wallet) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Wallet) SetCurrency(v string) {
	o.Currency = v
}

// GetBalance returns the Balance field value
func (o *Wallet) GetBalance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetBalanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *Wallet) SetBalance(v float64) {
	o.Balance = v
}

// GetCreditsBalance returns the CreditsBalance field value
func (o *Wallet) GetCreditsBalance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CreditsBalance
}

// GetCreditsBalanceOk returns a tuple with the CreditsBalance field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetCreditsBalanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsBalance, true
}

// SetCreditsBalance sets field value
func (o *Wallet) SetCreditsBalance(v float64) {
	o.CreditsBalance = v
}

// GetConsumedBalance returns the ConsumedBalance field value
func (o *Wallet) GetConsumedBalance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ConsumedBalance
}

// GetConsumedBalanceOk returns a tuple with the ConsumedBalance field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetConsumedBalanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumedBalance, true
}

// SetConsumedBalance sets field value
func (o *Wallet) SetConsumedBalance(v float64) {
	o.ConsumedBalance = v
}

// GetIsActive returns the IsActive field value
func (o *Wallet) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *Wallet) SetIsActive(v bool) {
	o.IsActive = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Wallet) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Wallet) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Wallet) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Wallet) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetRecentTransactions returns the RecentTransactions field value
func (o *Wallet) GetRecentTransactions() []WalletTransaction {
	if o == nil {
		var ret []WalletTransaction
		return ret
	}

	return o.RecentTransactions
}

// GetRecentTransactionsOk returns a tuple with the RecentTransactions field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetRecentTransactionsOk() ([]WalletTransaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecentTransactions, true
}

// SetRecentTransactions sets field value
func (o *Wallet) SetRecentTransactions(v []WalletTransaction) {
	o.RecentTransactions = v
}

func (o Wallet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["currency"] = o.Currency
	toSerialize["balance"] = o.Balance
	toSerialize["credits_balance"] = o.CreditsBalance
	toSerialize["consumed_balance"] = o.ConsumedBalance
	toSerialize["is_active"] = o.IsActive
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["recent_transactions"] = o.RecentTransactions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Wallet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"status",
		"currency",
		"balance",
		"credits_balance",
		"consumed_balance",
		"is_active",
		"created_at",
		"updated_at",
		"recent_transactions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWallet := _Wallet{}

	err = json.Unmarshal(data, &varWallet)

	if err != nil {
		return err
	}

	*o = Wallet(varWallet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "balance")
		delete(additionalProperties, "credits_balance")
		delete(additionalProperties, "consumed_balance")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "recent_transactions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWallet struct {
	value *Wallet
	isSet bool
}

func (v NullableWallet) Get() *Wallet {
	return v.value
}

func (v *NullableWallet) Set(val *Wallet) {
	v.value = val
	v.isSet = true
}

func (v NullableWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWallet(val *Wallet) *NullableWallet {
	return &NullableWallet{value: val, isSet: true}
}

func (v NullableWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


