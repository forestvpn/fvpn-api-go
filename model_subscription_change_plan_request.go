/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionChangePlanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionChangePlanRequest{}

// SubscriptionChangePlanRequest struct for SubscriptionChangePlanRequest
type SubscriptionChangePlanRequest struct {
	NewPlanPrice string `json:"new_plan_price"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionChangePlanRequest SubscriptionChangePlanRequest

// NewSubscriptionChangePlanRequest instantiates a new SubscriptionChangePlanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionChangePlanRequest(newPlanPrice string) *SubscriptionChangePlanRequest {
	this := SubscriptionChangePlanRequest{}
	this.NewPlanPrice = newPlanPrice
	return &this
}

// NewSubscriptionChangePlanRequestWithDefaults instantiates a new SubscriptionChangePlanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionChangePlanRequestWithDefaults() *SubscriptionChangePlanRequest {
	this := SubscriptionChangePlanRequest{}
	return &this
}

// GetNewPlanPrice returns the NewPlanPrice field value
func (o *SubscriptionChangePlanRequest) GetNewPlanPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPlanPrice
}

// GetNewPlanPriceOk returns a tuple with the NewPlanPrice field value
// and a boolean to check if the value has been set.
func (o *SubscriptionChangePlanRequest) GetNewPlanPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPlanPrice, true
}

// SetNewPlanPrice sets field value
func (o *SubscriptionChangePlanRequest) SetNewPlanPrice(v string) {
	o.NewPlanPrice = v
}

func (o SubscriptionChangePlanRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionChangePlanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["new_plan_price"] = o.NewPlanPrice

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionChangePlanRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"new_plan_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionChangePlanRequest := _SubscriptionChangePlanRequest{}

	err = json.Unmarshal(data, &varSubscriptionChangePlanRequest)

	if err != nil {
		return err
	}

	*o = SubscriptionChangePlanRequest(varSubscriptionChangePlanRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "new_plan_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionChangePlanRequest struct {
	value *SubscriptionChangePlanRequest
	isSet bool
}

func (v NullableSubscriptionChangePlanRequest) Get() *SubscriptionChangePlanRequest {
	return v.value
}

func (v *NullableSubscriptionChangePlanRequest) Set(val *SubscriptionChangePlanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionChangePlanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionChangePlanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionChangePlanRequest(val *SubscriptionChangePlanRequest) *NullableSubscriptionChangePlanRequest {
	return &NullableSubscriptionChangePlanRequest{value: val, isSet: true}
}

func (v NullableSubscriptionChangePlanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionChangePlanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


