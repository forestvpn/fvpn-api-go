/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account struct for Account
type Account struct {
	Id string `json:"id"`
	MaskedNumber string `json:"masked_number"`
	Number string `json:"number"`
	Status *AccountStatus `json:"status,omitempty"`
	Country Country `json:"country"`
	PhotoUrl string `json:"photo_url"`
	CreatedAt time.Time `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _Account Account

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(id string, maskedNumber string, number string, country Country, photoUrl string, createdAt time.Time) *Account {
	this := Account{}
	this.Id = id
	this.MaskedNumber = maskedNumber
	this.Number = number
	this.Country = country
	this.PhotoUrl = photoUrl
	this.CreatedAt = createdAt
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetId returns the Id field value
func (o *Account) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Account) SetId(v string) {
	o.Id = v
}

// GetMaskedNumber returns the MaskedNumber field value
func (o *Account) GetMaskedNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaskedNumber
}

// GetMaskedNumberOk returns a tuple with the MaskedNumber field value
// and a boolean to check if the value has been set.
func (o *Account) GetMaskedNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaskedNumber, true
}

// SetMaskedNumber sets field value
func (o *Account) SetMaskedNumber(v string) {
	o.MaskedNumber = v
}

// GetNumber returns the Number field value
func (o *Account) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Account) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Account) SetNumber(v string) {
	o.Number = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Account) GetStatus() AccountStatus {
	if o == nil || IsNil(o.Status) {
		var ret AccountStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetStatusOk() (*AccountStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Account) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AccountStatus and assigns it to the Status field.
func (o *Account) SetStatus(v AccountStatus) {
	o.Status = &v
}

// GetCountry returns the Country field value
func (o *Account) GetCountry() Country {
	if o == nil {
		var ret Country
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Account) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Account) SetCountry(v Country) {
	o.Country = v
}

// GetPhotoUrl returns the PhotoUrl field value
func (o *Account) GetPhotoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhotoUrl
}

// GetPhotoUrlOk returns a tuple with the PhotoUrl field value
// and a boolean to check if the value has been set.
func (o *Account) GetPhotoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhotoUrl, true
}

// SetPhotoUrl sets field value
func (o *Account) SetPhotoUrl(v string) {
	o.PhotoUrl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Account) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Account) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Account) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["masked_number"] = o.MaskedNumber
	toSerialize["number"] = o.Number
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["country"] = o.Country
	toSerialize["photo_url"] = o.PhotoUrl
	toSerialize["created_at"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Account) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"masked_number",
		"number",
		"country",
		"photo_url",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccount := _Account{}

	err = json.Unmarshal(data, &varAccount)

	if err != nil {
		return err
	}

	*o = Account(varAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "masked_number")
		delete(additionalProperties, "number")
		delete(additionalProperties, "status")
		delete(additionalProperties, "country")
		delete(additionalProperties, "photo_url")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


