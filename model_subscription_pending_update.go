/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SubscriptionPendingUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPendingUpdate{}

// SubscriptionPendingUpdate struct for SubscriptionPendingUpdate
type SubscriptionPendingUpdate struct {
	Plan Plan `json:"plan"`
	PlanPrice PlanPrice `json:"plan_price"`
	Amount float64 `json:"amount"`
	Currency string `json:"currency"`
	// The date when the transition will take effect.
	EffectiveAt time.Time `json:"effective_at"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionPendingUpdate SubscriptionPendingUpdate

// NewSubscriptionPendingUpdate instantiates a new SubscriptionPendingUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPendingUpdate(plan Plan, planPrice PlanPrice, amount float64, currency string, effectiveAt time.Time) *SubscriptionPendingUpdate {
	this := SubscriptionPendingUpdate{}
	this.Plan = plan
	this.PlanPrice = planPrice
	this.Amount = amount
	this.Currency = currency
	this.EffectiveAt = effectiveAt
	return &this
}

// NewSubscriptionPendingUpdateWithDefaults instantiates a new SubscriptionPendingUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPendingUpdateWithDefaults() *SubscriptionPendingUpdate {
	this := SubscriptionPendingUpdate{}
	return &this
}

// GetPlan returns the Plan field value
func (o *SubscriptionPendingUpdate) GetPlan() Plan {
	if o == nil {
		var ret Plan
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPendingUpdate) GetPlanOk() (*Plan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *SubscriptionPendingUpdate) SetPlan(v Plan) {
	o.Plan = v
}

// GetPlanPrice returns the PlanPrice field value
func (o *SubscriptionPendingUpdate) GetPlanPrice() PlanPrice {
	if o == nil {
		var ret PlanPrice
		return ret
	}

	return o.PlanPrice
}

// GetPlanPriceOk returns a tuple with the PlanPrice field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPendingUpdate) GetPlanPriceOk() (*PlanPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanPrice, true
}

// SetPlanPrice sets field value
func (o *SubscriptionPendingUpdate) SetPlanPrice(v PlanPrice) {
	o.PlanPrice = v
}

// GetAmount returns the Amount field value
func (o *SubscriptionPendingUpdate) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPendingUpdate) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SubscriptionPendingUpdate) SetAmount(v float64) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *SubscriptionPendingUpdate) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPendingUpdate) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *SubscriptionPendingUpdate) SetCurrency(v string) {
	o.Currency = v
}

// GetEffectiveAt returns the EffectiveAt field value
func (o *SubscriptionPendingUpdate) GetEffectiveAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EffectiveAt
}

// GetEffectiveAtOk returns a tuple with the EffectiveAt field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPendingUpdate) GetEffectiveAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveAt, true
}

// SetEffectiveAt sets field value
func (o *SubscriptionPendingUpdate) SetEffectiveAt(v time.Time) {
	o.EffectiveAt = v
}

func (o SubscriptionPendingUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPendingUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plan"] = o.Plan
	toSerialize["plan_price"] = o.PlanPrice
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["effective_at"] = o.EffectiveAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionPendingUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plan",
		"plan_price",
		"amount",
		"currency",
		"effective_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPendingUpdate := _SubscriptionPendingUpdate{}

	err = json.Unmarshal(data, &varSubscriptionPendingUpdate)

	if err != nil {
		return err
	}

	*o = SubscriptionPendingUpdate(varSubscriptionPendingUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "plan")
		delete(additionalProperties, "plan_price")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "effective_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionPendingUpdate struct {
	value *SubscriptionPendingUpdate
	isSet bool
}

func (v NullableSubscriptionPendingUpdate) Get() *SubscriptionPendingUpdate {
	return v.value
}

func (v *NullableSubscriptionPendingUpdate) Set(val *SubscriptionPendingUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPendingUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPendingUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPendingUpdate(val *SubscriptionPendingUpdate) *NullableSubscriptionPendingUpdate {
	return &NullableSubscriptionPendingUpdate{value: val, isSet: true}
}

func (v NullableSubscriptionPendingUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPendingUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


