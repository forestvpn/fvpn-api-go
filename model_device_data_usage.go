/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceDataUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceDataUsage{}

// DeviceDataUsage struct for DeviceDataUsage
type DeviceDataUsage struct {
	Rx int64 `json:"rx"`
	Tx int64 `json:"tx"`
	Total int64 `json:"total"`
	AdditionalProperties map[string]interface{}
}

type _DeviceDataUsage DeviceDataUsage

// NewDeviceDataUsage instantiates a new DeviceDataUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDataUsage(rx int64, tx int64, total int64) *DeviceDataUsage {
	this := DeviceDataUsage{}
	this.Rx = rx
	this.Tx = tx
	this.Total = total
	return &this
}

// NewDeviceDataUsageWithDefaults instantiates a new DeviceDataUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDataUsageWithDefaults() *DeviceDataUsage {
	this := DeviceDataUsage{}
	return &this
}

// GetRx returns the Rx field value
func (o *DeviceDataUsage) GetRx() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Rx
}

// GetRxOk returns a tuple with the Rx field value
// and a boolean to check if the value has been set.
func (o *DeviceDataUsage) GetRxOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rx, true
}

// SetRx sets field value
func (o *DeviceDataUsage) SetRx(v int64) {
	o.Rx = v
}

// GetTx returns the Tx field value
func (o *DeviceDataUsage) GetTx() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Tx
}

// GetTxOk returns a tuple with the Tx field value
// and a boolean to check if the value has been set.
func (o *DeviceDataUsage) GetTxOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tx, true
}

// SetTx sets field value
func (o *DeviceDataUsage) SetTx(v int64) {
	o.Tx = v
}

// GetTotal returns the Total field value
func (o *DeviceDataUsage) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *DeviceDataUsage) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *DeviceDataUsage) SetTotal(v int64) {
	o.Total = v
}

func (o DeviceDataUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceDataUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rx"] = o.Rx
	toSerialize["tx"] = o.Tx
	toSerialize["total"] = o.Total

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceDataUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rx",
		"tx",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceDataUsage := _DeviceDataUsage{}

	err = json.Unmarshal(data, &varDeviceDataUsage)

	if err != nil {
		return err
	}

	*o = DeviceDataUsage(varDeviceDataUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rx")
		delete(additionalProperties, "tx")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceDataUsage struct {
	value *DeviceDataUsage
	isSet bool
}

func (v NullableDeviceDataUsage) Get() *DeviceDataUsage {
	return v.value
}

func (v *NullableDeviceDataUsage) Set(val *DeviceDataUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDataUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDataUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDataUsage(val *DeviceDataUsage) *NullableDeviceDataUsage {
	return &NullableDeviceDataUsage{value: val, isSet: true}
}

func (v NullableDeviceDataUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDataUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


