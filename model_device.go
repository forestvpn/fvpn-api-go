/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Device type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Device{}

// Device struct for Device
type Device struct {
	Id string `json:"id"`
	Name *string `json:"name,omitempty"`
	Ipv4 string `json:"ipv4"`
	Ipv6 string `json:"ipv6"`
	PubKey string `json:"pub_key"`
	PsKey string `json:"ps_key"`
	// Bcrypt Hashed Password for Authentication, e.g. HTTP Proxy
	Password NullableString `json:"password,omitempty"`
	// Determine connection status based on last activity time from data usage.
	ConnectionStatus ConnectionStatus `json:"connection_status"`
	CreatedAt time.Time `json:"created_at"`
	LastActiveAt time.Time `json:"last_active_at"`
	Last30daysDataUsage DeviceDataUsage `json:"last_30days_data_usage"`
	// Generate a quick configuration string for the device.
	QuickConfTemplate string `json:"quick_conf_template"`
	// Return the endpoint for the device.
	ExitNodeEndpoint string `json:"exit_node_endpoint"`
	AdditionalProperties map[string]interface{}
}

type _Device Device

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice(id string, ipv4 string, ipv6 string, pubKey string, psKey string, connectionStatus ConnectionStatus, createdAt time.Time, lastActiveAt time.Time, last30daysDataUsage DeviceDataUsage, quickConfTemplate string, exitNodeEndpoint string) *Device {
	this := Device{}
	this.Id = id
	this.Ipv4 = ipv4
	this.Ipv6 = ipv6
	this.PubKey = pubKey
	this.PsKey = psKey
	this.ConnectionStatus = connectionStatus
	this.CreatedAt = createdAt
	this.LastActiveAt = lastActiveAt
	this.Last30daysDataUsage = last30daysDataUsage
	this.QuickConfTemplate = quickConfTemplate
	this.ExitNodeEndpoint = exitNodeEndpoint
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetId returns the Id field value
func (o *Device) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Device) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Device) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Device) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Device) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Device) SetName(v string) {
	o.Name = &v
}

// GetIpv4 returns the Ipv4 field value
func (o *Device) GetIpv4() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value
// and a boolean to check if the value has been set.
func (o *Device) GetIpv4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4, true
}

// SetIpv4 sets field value
func (o *Device) SetIpv4(v string) {
	o.Ipv4 = v
}

// GetIpv6 returns the Ipv6 field value
func (o *Device) GetIpv6() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value
// and a boolean to check if the value has been set.
func (o *Device) GetIpv6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv6, true
}

// SetIpv6 sets field value
func (o *Device) SetIpv6(v string) {
	o.Ipv6 = v
}

// GetPubKey returns the PubKey field value
func (o *Device) GetPubKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value
// and a boolean to check if the value has been set.
func (o *Device) GetPubKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PubKey, true
}

// SetPubKey sets field value
func (o *Device) SetPubKey(v string) {
	o.PubKey = v
}

// GetPsKey returns the PsKey field value
func (o *Device) GetPsKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PsKey
}

// GetPsKeyOk returns a tuple with the PsKey field value
// and a boolean to check if the value has been set.
func (o *Device) GetPsKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PsKey, true
}

// SetPsKey sets field value
func (o *Device) SetPsKey(v string) {
	o.PsKey = v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *Device) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *Device) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *Device) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *Device) UnsetPassword() {
	o.Password.Unset()
}

// GetConnectionStatus returns the ConnectionStatus field value
func (o *Device) GetConnectionStatus() ConnectionStatus {
	if o == nil {
		var ret ConnectionStatus
		return ret
	}

	return o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value
// and a boolean to check if the value has been set.
func (o *Device) GetConnectionStatusOk() (*ConnectionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionStatus, true
}

// SetConnectionStatus sets field value
func (o *Device) SetConnectionStatus(v ConnectionStatus) {
	o.ConnectionStatus = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Device) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Device) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Device) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastActiveAt returns the LastActiveAt field value
func (o *Device) GetLastActiveAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastActiveAt
}

// GetLastActiveAtOk returns a tuple with the LastActiveAt field value
// and a boolean to check if the value has been set.
func (o *Device) GetLastActiveAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastActiveAt, true
}

// SetLastActiveAt sets field value
func (o *Device) SetLastActiveAt(v time.Time) {
	o.LastActiveAt = v
}

// GetLast30daysDataUsage returns the Last30daysDataUsage field value
func (o *Device) GetLast30daysDataUsage() DeviceDataUsage {
	if o == nil {
		var ret DeviceDataUsage
		return ret
	}

	return o.Last30daysDataUsage
}

// GetLast30daysDataUsageOk returns a tuple with the Last30daysDataUsage field value
// and a boolean to check if the value has been set.
func (o *Device) GetLast30daysDataUsageOk() (*DeviceDataUsage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Last30daysDataUsage, true
}

// SetLast30daysDataUsage sets field value
func (o *Device) SetLast30daysDataUsage(v DeviceDataUsage) {
	o.Last30daysDataUsage = v
}

// GetQuickConfTemplate returns the QuickConfTemplate field value
func (o *Device) GetQuickConfTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuickConfTemplate
}

// GetQuickConfTemplateOk returns a tuple with the QuickConfTemplate field value
// and a boolean to check if the value has been set.
func (o *Device) GetQuickConfTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuickConfTemplate, true
}

// SetQuickConfTemplate sets field value
func (o *Device) SetQuickConfTemplate(v string) {
	o.QuickConfTemplate = v
}

// GetExitNodeEndpoint returns the ExitNodeEndpoint field value
func (o *Device) GetExitNodeEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExitNodeEndpoint
}

// GetExitNodeEndpointOk returns a tuple with the ExitNodeEndpoint field value
// and a boolean to check if the value has been set.
func (o *Device) GetExitNodeEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExitNodeEndpoint, true
}

// SetExitNodeEndpoint sets field value
func (o *Device) SetExitNodeEndpoint(v string) {
	o.ExitNodeEndpoint = v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Device) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["ipv4"] = o.Ipv4
	toSerialize["ipv6"] = o.Ipv6
	toSerialize["pub_key"] = o.PubKey
	toSerialize["ps_key"] = o.PsKey
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	toSerialize["connection_status"] = o.ConnectionStatus
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["last_active_at"] = o.LastActiveAt
	toSerialize["last_30days_data_usage"] = o.Last30daysDataUsage
	toSerialize["quick_conf_template"] = o.QuickConfTemplate
	toSerialize["exit_node_endpoint"] = o.ExitNodeEndpoint

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Device) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"ipv4",
		"ipv6",
		"pub_key",
		"ps_key",
		"connection_status",
		"created_at",
		"last_active_at",
		"last_30days_data_usage",
		"quick_conf_template",
		"exit_node_endpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevice := _Device{}

	err = json.Unmarshal(data, &varDevice)

	if err != nil {
		return err
	}

	*o = Device(varDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")
		delete(additionalProperties, "pub_key")
		delete(additionalProperties, "ps_key")
		delete(additionalProperties, "password")
		delete(additionalProperties, "connection_status")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "last_active_at")
		delete(additionalProperties, "last_30days_data_usage")
		delete(additionalProperties, "quick_conf_template")
		delete(additionalProperties, "exit_node_endpoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


