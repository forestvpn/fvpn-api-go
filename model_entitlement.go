/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Entitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entitlement{}

// Entitlement Serializer for the Entitlement model.
type Entitlement struct {
	Id string `json:"id"`
	LookupKey string `json:"lookup_key" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	Metadata map[string]string `json:"metadata"`
	ExpiresAt time.Time `json:"expires_at"`
	IsActive bool `json:"is_active"`
	AdditionalProperties map[string]interface{}
}

type _Entitlement Entitlement

// NewEntitlement instantiates a new Entitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlement(id string, lookupKey string, metadata map[string]string, expiresAt time.Time, isActive bool) *Entitlement {
	this := Entitlement{}
	this.Id = id
	this.LookupKey = lookupKey
	this.Metadata = metadata
	this.ExpiresAt = expiresAt
	this.IsActive = isActive
	return &this
}

// NewEntitlementWithDefaults instantiates a new Entitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementWithDefaults() *Entitlement {
	this := Entitlement{}
	return &this
}

// GetId returns the Id field value
func (o *Entitlement) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Entitlement) SetId(v string) {
	o.Id = v
}

// GetLookupKey returns the LookupKey field value
func (o *Entitlement) GetLookupKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LookupKey
}

// GetLookupKeyOk returns a tuple with the LookupKey field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetLookupKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LookupKey, true
}

// SetLookupKey sets field value
func (o *Entitlement) SetLookupKey(v string) {
	o.LookupKey = v
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for map[string]string will be returned
func (o *Entitlement) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Entitlement) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Entitlement) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *Entitlement) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *Entitlement) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetIsActive returns the IsActive field value
func (o *Entitlement) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *Entitlement) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *Entitlement) SetIsActive(v bool) {
	o.IsActive = v
}

func (o Entitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["lookup_key"] = o.LookupKey
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["expires_at"] = o.ExpiresAt
	toSerialize["is_active"] = o.IsActive

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Entitlement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"lookup_key",
		"metadata",
		"expires_at",
		"is_active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntitlement := _Entitlement{}

	err = json.Unmarshal(data, &varEntitlement)

	if err != nil {
		return err
	}

	*o = Entitlement(varEntitlement)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "lookup_key")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "is_active")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntitlement struct {
	value *Entitlement
	isSet bool
}

func (v NullableEntitlement) Get() *Entitlement {
	return v.value
}

func (v *NullableEntitlement) Set(val *Entitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlement(val *Entitlement) *NullableEntitlement {
	return &NullableEntitlement{value: val, isSet: true}
}

func (v NullableEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


