/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// ManagedBy * `apple` - Apple * `google` - Google * `stripe` - Stripe * `unknown` - Unknown
type ManagedBy string

// List of ManagedBy
const (
	MANAGEDBY_APPLE ManagedBy = "apple"
	MANAGEDBY_GOOGLE ManagedBy = "google"
	MANAGEDBY_STRIPE ManagedBy = "stripe"
	MANAGEDBY_UNKNOWN ManagedBy = "unknown"
)

// All allowed values of ManagedBy enum
var AllowedManagedByEnumValues = []ManagedBy{
	"apple",
	"google",
	"stripe",
	"unknown",
}

func (v *ManagedBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagedBy(value)
	for _, existing := range AllowedManagedByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagedBy", value)
}

// NewManagedByFromValue returns a pointer to a valid ManagedBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagedByFromValue(v string) (*ManagedBy, error) {
	ev := ManagedBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagedBy: valid values are %v", v, AllowedManagedByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagedBy) IsValid() bool {
	for _, existing := range AllowedManagedByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ManagedBy value
func (v ManagedBy) Ptr() *ManagedBy {
	return &v
}

type NullableManagedBy struct {
	value *ManagedBy
	isSet bool
}

func (v NullableManagedBy) Get() *ManagedBy {
	return v.value
}

func (v *NullableManagedBy) Set(val *ManagedBy) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedBy) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedBy(val *ManagedBy) *NullableManagedBy {
	return &NullableManagedBy{value: val, isSet: true}
}

func (v NullableManagedBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

