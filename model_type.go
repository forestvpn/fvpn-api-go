/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"fmt"
)

// Type * `card` - Card * `bank_account` - Bank Account * `paypal` - PayPal * `apple_pay` - Apple Pay * `google_pay` - Google Pay * `stripe` - Stripe * `braintree` - Braintree * `square` - Square * `amazon_pay` - Amazon Pay * `venmo` - Venmo * `zelle` - Zelle * `cash_app` - Cash App * `other` - Other
type Type string

// List of Type
const (
	TYPE_CARD Type = "card"
	TYPE_BANK_ACCOUNT Type = "bank_account"
	TYPE_PAYPAL Type = "paypal"
	TYPE_APPLE_PAY Type = "apple_pay"
	TYPE_GOOGLE_PAY Type = "google_pay"
	TYPE_STRIPE Type = "stripe"
	TYPE_BRAINTREE Type = "braintree"
	TYPE_SQUARE Type = "square"
	TYPE_AMAZON_PAY Type = "amazon_pay"
	TYPE_VENMO Type = "venmo"
	TYPE_ZELLE Type = "zelle"
	TYPE_CASH_APP Type = "cash_app"
	TYPE_OTHER Type = "other"
)

// All allowed values of Type enum
var AllowedTypeEnumValues = []Type{
	"card",
	"bank_account",
	"paypal",
	"apple_pay",
	"google_pay",
	"stripe",
	"braintree",
	"square",
	"amazon_pay",
	"venmo",
	"zelle",
	"cash_app",
	"other",
}

func (v *Type) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Type(value)
	for _, existing := range AllowedTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Type", value)
}

// NewTypeFromValue returns a pointer to a valid Type
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypeFromValue(v string) (*Type, error) {
	ev := Type(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Type: valid values are %v", v, AllowedTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Type) IsValid() bool {
	for _, existing := range AllowedTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Type value
func (v Type) Ptr() *Type {
	return &v
}

type NullableType struct {
	value *Type
	isSet bool
}

func (v NullableType) Get() *Type {
	return v.value
}

func (v *NullableType) Set(val *Type) {
	v.value = val
	v.isSet = true
}

func (v NullableType) IsSet() bool {
	return v.isSet
}

func (v *NullableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableType(val *Type) *NullableType {
	return &NullableType{value: val, isSet: true}
}

func (v NullableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

