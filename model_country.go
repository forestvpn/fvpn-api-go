/*
ForestVPN API

ForestVPN API Documentation

API version: 3.0.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fvpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Country type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Country{}

// Country struct for Country
type Country struct {
	Id string `json:"id"`
	Name string `json:"name"`
	OfficialName string `json:"official_name"`
	Flag string `json:"flag"`
	Alpha3 string `json:"alpha_3"`
	Numeric string `json:"numeric"`
}

type _Country Country

// NewCountry instantiates a new Country object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountry(id string, name string, officialName string, flag string, alpha3 string, numeric string) *Country {
	this := Country{}
	this.Id = id
	this.Name = name
	this.OfficialName = officialName
	this.Flag = flag
	this.Alpha3 = alpha3
	this.Numeric = numeric
	return &this
}

// NewCountryWithDefaults instantiates a new Country object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryWithDefaults() *Country {
	this := Country{}
	return &this
}

// GetId returns the Id field value
func (o *Country) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Country) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Country) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Country) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Country) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Country) SetName(v string) {
	o.Name = v
}

// GetOfficialName returns the OfficialName field value
func (o *Country) GetOfficialName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OfficialName
}

// GetOfficialNameOk returns a tuple with the OfficialName field value
// and a boolean to check if the value has been set.
func (o *Country) GetOfficialNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfficialName, true
}

// SetOfficialName sets field value
func (o *Country) SetOfficialName(v string) {
	o.OfficialName = v
}

// GetFlag returns the Flag field value
func (o *Country) GetFlag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Flag
}

// GetFlagOk returns a tuple with the Flag field value
// and a boolean to check if the value has been set.
func (o *Country) GetFlagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flag, true
}

// SetFlag sets field value
func (o *Country) SetFlag(v string) {
	o.Flag = v
}

// GetAlpha3 returns the Alpha3 field value
func (o *Country) GetAlpha3() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alpha3
}

// GetAlpha3Ok returns a tuple with the Alpha3 field value
// and a boolean to check if the value has been set.
func (o *Country) GetAlpha3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alpha3, true
}

// SetAlpha3 sets field value
func (o *Country) SetAlpha3(v string) {
	o.Alpha3 = v
}

// GetNumeric returns the Numeric field value
func (o *Country) GetNumeric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Numeric
}

// GetNumericOk returns a tuple with the Numeric field value
// and a boolean to check if the value has been set.
func (o *Country) GetNumericOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Numeric, true
}

// SetNumeric sets field value
func (o *Country) SetNumeric(v string) {
	o.Numeric = v
}

func (o Country) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Country) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["official_name"] = o.OfficialName
	toSerialize["flag"] = o.Flag
	toSerialize["alpha_3"] = o.Alpha3
	toSerialize["numeric"] = o.Numeric
	return toSerialize, nil
}

func (o *Country) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"official_name",
		"flag",
		"alpha_3",
		"numeric",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountry := _Country{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCountry)

	if err != nil {
		return err
	}

	*o = Country(varCountry)

	return err
}

type NullableCountry struct {
	value *Country
	isSet bool
}

func (v NullableCountry) Get() *Country {
	return v.value
}

func (v *NullableCountry) Set(val *Country) {
	v.value = val
	v.isSet = true
}

func (v NullableCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountry(val *Country) *NullableCountry {
	return &NullableCountry{value: val, isSet: true}
}

func (v NullableCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


